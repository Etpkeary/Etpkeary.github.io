<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis</title>
      <link href="/posts/13919.html"/>
      <url>/posts/13919.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h3><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212304236.png" alt="logo"></p><ul><li>MyBatis 是一款持久层框架</li><li>它支持自定义 SQL、存储过程以及高级映射。</li><li>MyBatis 免除了几乎所有的 JDBC 代码以及 设置参数和获取结果集的工作。</li><li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li></ul><h3 id="获取Mybatis"><a href="#获取Mybatis" class="headerlink" title="获取Mybatis"></a>获取Mybatis</h3><p>Maven仓库:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Github: <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p>数据持久化：</p><ul><li>将数据持久的存储在某个地方，例如：将内存的数据存储到硬盘，数据库，io文件（以前）</li></ul><p>持久层：</p><ul><li><p>Dao层</p></li><li><p>用来完成持久化工作的代码</p></li></ul><h3 id="Mybatis优势"><a href="#Mybatis优势" class="headerlink" title="Mybatis优势"></a>Mybatis优势</h3><ul><li>简单易学</li><li>灵活</li><li>解除sql与程序代码的耦合</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul><h2 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><strong>新建数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists mybatis default charset=utf8;</span><br><span class="line"></span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line">create table `user`(</span><br><span class="line">id int(20) not null auto_increment primary key,</span><br><span class="line">`name` varchar(30) default null,</span><br><span class="line">`pwd` varchar(30) default null</span><br><span class="line">)ENGINE=INNODB default charset=utf8;</span><br><span class="line"></span><br><span class="line">insert into `user`(`name`,`pwd`) VALUES</span><br><span class="line">(&quot;张三&quot;,&quot;123456&quot;),</span><br><span class="line">(&quot;李四&quot;,&quot;123456&quot;),</span><br><span class="line">(&quot;王五&quot;,&quot;123456&quot;)</span><br></pre></td></tr></table></figure><p>新建项目</p><ul><li>新建普通Maven项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212312146.png" alt="image-20220721231201088"></p><p>这名称可以改一下</p><ul><li>删除src目录（父工程： 方便练习学习，不用多次创建项目）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212314517.png" alt="image-20220721231437466"></p><ul><li>在父工程的pom.xml中导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    Mysql驱动    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    mybatis    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    junit 单元测试    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：如果依赖包名报红，点击idea侧边栏上的maven后，点击刷新</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212315938.png" alt="在这里插入图片描述"></p><p><strong>项目搭建完毕</strong></p><h3 id="创建一个子模块"><a href="#创建一个子模块" class="headerlink" title="创建一个子模块"></a>创建一个子模块</h3><ul><li>在父项目右键新建一个模块（子工程）</li></ul><p>这样可以不用每次都导包了</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212317569.png" alt="image-20220721231710522"></p><p>再次创建一个普通maven项目</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212312146.png" alt="image-20220721231201088"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212318551.png" alt="image-20220721231849505"></p><p><strong>编写mybatis核心配置文件</strong></p><p>在mybatis-01/src/main/resources下新建mybatis-config.xml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;!--configuration核心配置文件--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=ture&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root 你的数据库用户名&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;你的数据库密码&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">&lt;!-- 注意每个mapper.xml都要在此处注册 --&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>编写mybatis工具类</strong></p><ul><li>在mybatis01/src/main/java下创建自己的包路径</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212321662.png" alt="image-20220721232139619"></p><ul><li>工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用mybatis的第一步</span></span><br><span class="line">            <span class="comment">//创建sqlSessionFactory对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有了 SqlSessionFactory，我们可以从中获得 SqlSession 的实例.</span></span><br><span class="line">    <span class="comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p><strong>实体类</strong></p><ul><li>entity包下 User类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nych.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao (或mapper) 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口实现类: 由以前的类转换为xml文件：</strong></p><ul><li>UserMapper.xml:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace= 绑定一个对应的dao/mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.nych.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  查询 id对应方法名 resultType = 返回类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nych.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from `user`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>namespace: 对应一个要实现的接口</li><li>id: 对应接口中的方法名</li><li>resultType: 返回结果类型</li><li>还有一个 parameterType: 参数类型; 会在后面用到</li></ul><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212321662.png" alt="image-20220721232139619"></p><p>测试代码</p><p>junit测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//第一步： 获取SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">        <span class="comment">//方式一： getMapper（推荐使用）</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二： (不推荐使用)</span></span><br><span class="line">        List&lt;User&gt; userList2 = sqlSession.selectList(<span class="string">&quot;com.nych.dao.UserDao.getUserList&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList2) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212327500.png" alt="image-20220721232738446"></p><p><strong>总结</strong></p><p>写Mybatis的步骤：</p><ul><li><p>在Maven中添加依赖包</p></li><li><p>编写获取SqlSession对象的工具类</p></li><li><p>工具类中需要mybatis 核心配置文件（mybatis-config.xml）</p></li><li><p>编写User表的实体类User.java</p></li><li><p>编写操作User的接口UserDao/UserMapper(interface)</p></li><li><p>编写实现UserDao/UserMapper的实现 UserDao.xml / UserMapper.xml</p></li><li><p>写测试类测试代码</p></li></ul><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><ul><li>增加(Create)、检索(Retrieve)、更新(Update)和删除(Delete)</li></ul><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><ul><li>需求： 新增一名用户</li><li>实现： 在UserMapper/UserDao中写一个抽象方法</li></ul><pre><code>//新增一个用户int addUser(User user);</code></pre><ul><li>在userMapper.xml中实现该抽象方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 新增用户 --&gt;</span><br><span class="line">&lt;insert id=&quot;addUser&quot; parameterType=&quot;com.nych.entity.User&quot;&gt;</span><br><span class="line">    insert into mybatis.user (`name`,`pwd`) values (#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><ul><li><p>测试</p><ul><li>注意： 增、删、改 三个操作都需要提交事务</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//增删改 需要提交事务</span><br><span class="line">//新增用户测试</span><br><span class="line">@Test</span><br><span class="line">public void addUser()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    User user = new User(&quot;新用户&quot;,&quot;000000&quot;);</span><br><span class="line">    int i = userMapper.addUser(user);</span><br><span class="line">    //提交</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    </span><br><span class="line">    if(i &gt; 0)&#123;</span><br><span class="line">        System.out.println(&quot;成功添加了&quot;+ i +&quot;个用户！&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        System.out.println(&quot;添加用户失败！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //关闭</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212330245.png" alt="image-20220721233010198"></p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><ul><li>需求： 根据id查用户<ul><li>实现：在UserDao/UserMapper中添加抽象方法：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//根据id查询</span><br><span class="line">User getUserById(int id);</span><br></pre></td></tr></table></figure><ul><li>在UserMapper.xml中实现接口中的抽象方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.nych.entity.User&quot;&gt;</span><br><span class="line">    select * from `user` where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li><p>parameterType: 参数类型</p></li><li><p>测试</p></li></ul><pre><code>//测试根据id查用户@Testpublic void getUserById()&#123;    SqlSession sqlSession = MybatisUtils.getSession();    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);    User user = userMapper.getUserById(1);    System.out.println(&quot;user = &quot; + user);    sqlSession.close();&#125;</code></pre><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212332059.png" alt="image-20220721233221016"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><ul><li><p>需求： 修改一个用户</p></li><li><p>实现： 在UserDao/UserMapper中添加一个抽象方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><ul><li>在UserMapper.xml中实现这个抽象方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--修改用户信息--&gt;</span><br><span class="line">&lt;update id=&quot;updateUser&quot; parameterType=&quot;com.nych.entity.User&quot;&gt;</span><br><span class="line">    update mybatis.user set `name` = #&#123;name&#125;,`pwd` = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//测试修改</span><br><span class="line">@Test</span><br><span class="line">public void updateUser()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    User user = new User(5,&quot;修改新用户&quot;,&quot;111111&quot;);</span><br><span class="line">    int i = userMapper.updateUser(user);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">    </span><br><span class="line">    if(i &gt; 0)&#123;</span><br><span class="line">        System.out.println(&quot;成功修改了&quot; + i + &quot;个用户！&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        System.out.println(&quot;修改用户失败！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //关闭</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212334500.png" alt="image-20220721233432449"></p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><ul><li><p>需求：根据id删除一个用户</p></li><li><p>实现： 在UserDao/UserMapper中添加一个抽象方法</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//删除一个用户</span><br><span class="line">int deleteUser(int id);</span><br></pre></td></tr></table></figure><ul><li>在UserMapper.xml中实现这个抽象方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  删除一个用户  --&gt;</span><br><span class="line">&lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">    delete from `user` where id = #&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><ul><li>测试</li><li>测试代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//测试删除</span><br><span class="line">@Test</span><br><span class="line">public void deleteUser()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    int i = userMapper.deleteUser(5);</span><br><span class="line"></span><br><span class="line">    if(i &gt; 0)&#123;</span><br><span class="line">        System.out.println(&quot;成功删除了&quot; + i + &quot;个用户！&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        System.out.println(&quot;删除用户失败！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    //关闭</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212335464.png" alt="image-20220721233545419"></p><h3 id="使用Map传递参数"><a href="#使用Map传递参数" class="headerlink" title="使用Map传递参数"></a>使用Map传递参数</h3><ul><li>如果数据库中字段很多，实体类中的参数也很多，那么使用实体类对象来传参就不是很方便了，此时可以考虑使用Map！<ul><li>使用map传参，直接在sql中使用map的key即可取出参数。</li><li>使用对象传参，直接在sql中使用对象的属性名即可取出参数。</li></ul></li></ul><h4 id="使用Map传递参数，实现添加用户"><a href="#使用Map传递参数，实现添加用户" class="headerlink" title="使用Map传递参数，实现添加用户"></a>使用Map传递参数，实现添加用户</h4><ul><li>在UserDao/UserMapper中添加一个抽象方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//添加用户 map方法</span><br><span class="line">int addUser2(Map&lt;String, Object&gt; map);</span><br></pre></td></tr></table></figure><ul><li>在UserMapper.xml中实现这个抽象方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  新增用户 Map方法  --&gt;</span><br><span class="line">&lt;insert id=&quot;addUser2&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    insert into mybatis.user (`name`,`pwd`) values (#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><pre><code>@Testpublic void addUser2()&#123;    SqlSession sqlSession = MybatisUtils.getSession();    UserMapper mapper = sqlSession.getMapper(UserMapper.class);    Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();    map.put(&quot;username&quot;,&quot;张三&quot;);    map.put(&quot;password&quot;,&quot;222222A&quot;);    int i = mapper.addUser2(map);    if(i &gt; 0)&#123;        System.out.println(&quot;成功插入&quot;+ i + &quot;个用户！&quot;);    &#125;else &#123;        System.out.println(&quot;插入失败&quot;);    &#125;    sqlSession.commit();    sqlSession.close();&#125;</code></pre><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212340043.png" alt="image-20220721234036994"></p><h4 id="使用Map传递参数，实现查询用户"><a href="#使用Map传递参数，实现查询用户" class="headerlink" title="使用Map传递参数，实现查询用户"></a>使用Map传递参数，实现查询用户</h4><ul><li>在UserDao/UserMapper中添加一个抽象方法</li></ul><pre><code>//根据id查用户 Map方法User getUserById2(Map&lt;String, Object&gt; map);</code></pre><ul><li>在UserMapper.xml中实现这个抽象方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getUserById2&quot; parameterType=&quot;map&quot; resultType=&quot;com.nych.entity.User&quot;&gt;</span><br><span class="line">    select * from `user` where id = #&#123;userId&#125; and `name` = #&#123;userName&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//测试 使用Map传参</span><br><span class="line">@Test</span><br><span class="line">public void getUserById2()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(&quot;userId&quot;,6);</span><br><span class="line">    map.put(&quot;userName&quot;,&quot;张三&quot;);</span><br><span class="line"></span><br><span class="line">    User user = mapper.getUserById2(map);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;user = &quot; + user);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207212344948.png" alt="image-20220721234210873"></p><h2 id="Mybatis-模糊查询"><a href="#Mybatis-模糊查询" class="headerlink" title="Mybatis 模糊查询"></a>Mybatis 模糊查询</h2><h3 id="传递字符串”-xxx-”"><a href="#传递字符串”-xxx-”" class="headerlink" title="传递字符串”%xxx%”"></a><strong>传递字符串”%xxx%”</strong></h3><ul><li>在UserDao/UserMapper中添加一个抽象方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//模糊查询</span><br><span class="line">List&lt;User&gt; getUserLike(String value);</span><br></pre></td></tr></table></figure><ul><li>在UserMapper.xml中实现这个抽象方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  模糊查询用户  --&gt;</span><br><span class="line">&lt;select id=&quot;getUserLike&quot; resultType=&quot;com.nych.entity.User&quot;&gt;</span><br><span class="line">    select * from `user` where `name` like #&#123;value&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//测试 模糊查询1</span><br><span class="line">@Test</span><br><span class="line">public void getUserLike()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    String getUsername = &quot;张&quot;;   //假如是从前端获取到的数据</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserLike(&quot;%&quot;+getUsername+&quot;%&quot;);</span><br><span class="line">    for (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在SQL中拼接通配符"><a href="#在SQL中拼接通配符" class="headerlink" title="在SQL中拼接通配符"></a><strong>在SQL中拼接通配符</strong></h3><ul><li>注意防止sql注入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `user` where `name` like &quot;%&quot;#&#123;value&#125;&quot;%&quot;;</span><br></pre></td></tr></table></figure><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><ul><li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</p><ul><li><p>mybatis-config.xml</p><ul><li>configuration（配置）<ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul></li></ul></li></ul></li></ul><h3 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h3><ul><li>MyBatis 可以配置成适应多种环境</li><li>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments default=&quot;test&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=ture&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">        &lt;!--测试环境--&gt;</span><br><span class="line">        &lt;environment id=&quot;test&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br></pre></td></tr></table></figure><h4 id="事务管理器（transactionManager）"><a href="#事务管理器（transactionManager）" class="headerlink" title="事务管理器（transactionManager）"></a>事务管理器（transactionManager）</h4><ul><li>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC | MANAGED]”）默认: JDBC</li><li><p>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</p></li><li><p>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="数据源（dataSource）"><a href="#数据源（dataSource）" class="headerlink" title="数据源（dataSource）"></a>数据源（dataSource）</h4><ul><li>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”） 默认： POOLED</li></ul><h3 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h3><ul><li>可以通过properties 属性来实现引用配置文件</li></ul><p><strong>编写数据库配置文件: </strong></p><ul><li>在resources下新建 db.properties:</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/mybatis?</span></span><br><span class="line"><span class="attr">useSSL</span>=<span class="string">false&amp;useUnicode=ture&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">123456</span></span><br></pre></td></tr></table></figure><p>在核心配置文件(mybatis-config.xml)中引入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  引入配置文件： 只能写在顶部  --&gt;</span><br><span class="line">&lt;properties resource=&quot;db.properties&quot;&gt;</span><br><span class="line">    &lt;!--内部定义变量： 如果有相同变量名， 优先使用引入的配置 --&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>引入后即可在配置文件中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;environment id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">    &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br></pre></td></tr></table></figure><h3 id="typeAliases（类型别名）"><a href="#typeAliases（类型别名）" class="headerlink" title="typeAliases（类型别名）"></a>typeAliases（类型别名）</h3><ul><li>类型别名可为 Java 类型设置一个缩写名字。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;!-- 给类起别名 --&gt;</span><br><span class="line">    &lt;typeAlias alias=&quot;User&quot; type=&quot;com.nych.entity.User&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><ul><li>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;!--扫描entity包，以entity包中类名为别名（首字母小写）--&gt;</span><br><span class="line">&lt;package name=&quot;com.nych.entity&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><ul><li><p>每一个在包 com.nych.entity 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 com.nych.entity.User 的别名为 user；</p></li><li><p>若有注解，则别名为其注解值。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;别名&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置好别名后，即可在其它地方使用该别名， 如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getUserList&quot; resultType=&quot;user&quot;&gt;</span><br><span class="line">    select * from `user`</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="设置（settings）"><a href="#设置（settings）" class="headerlink" title="设置（settings）"></a>设置（settings）</h3><ul><li>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</li></ul><div class="table-container"><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true \</td><td>false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。true \</td><td>false</td><td>true \</td><td>false</td><td>false</td></tr><tr><td>logImpl</td><td>logImpl</td><td>SLF4J \</td><td>LOG4J \</td><td>LOG4J2 \</td><td>JDK_LOGGING \</td><td>COMMONS_LOGGING \</td><td>STDOUT_LOGGING \</td><td>NO_LOGGING</td><td>未设置</td></tr></tbody></table></div><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）<ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h3 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h3><ul><li>MapperRegistry: 在核心配置文件(mybatis-config.xml) 中注册UserMapper.xml文件</li><li>注册方法一：</li></ul><pre><code>&lt;mappers&gt;    &lt;mapper resource=&quot;com/nych/dao/UserMapper.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><ul><li><p>注册方法二：使用class</p><ul><li><p>接口和mapper.xml必须同名</p></li><li><p>接口和mapper.xml必须在同一个包下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class=&quot;com.nych.dao.UserMapper&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注册方法三：使用包扫描</p><ul><li><p>接口和mapper.xml必须同名</p></li><li><p>接口和mapper.xml必须在同一个包下</p></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">     &lt;package name=&quot;com.nych.dao&quot;/&gt;</span><br><span class="line"> &lt;/mappers&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域和生命周期"><a href="#作用域和生命周期" class="headerlink" title="作用域和生命周期"></a>作用域和生命周期</h3><ul><li>不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。</li></ul><p>SqlSessionFactoryBuilder:</p><ul><li><p>一旦创建了SqlsessionFactory,就不在需要它了</p></li><li><p>那么最好把它定义为局部变量（方法作用域）</p></li></ul><p>SqlsessionFactory:</p><ul><li>一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li></ul><ul><li>因此 SqlSessionFactory 的最佳作用域是应用作用域。</li></ul><ul><li>最简单的就是使用单例模式或者静态单例模式。</li></ul><p>Sqlsession：</p><ul><li><p>每个线程都应该有它自己的 SqlSession 实例。</p></li><li><p>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域 。</p></li><li><p>使用完毕，立即关闭（ 最好放在finally 块 ）。</p></li></ul><h2 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h2><p>解决属性名和字段名不一致的问题</p><ul><li>数据库中的字段</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207220005272.png" alt="在这里插入图片描述"></p><ul><li>新建项目<ul><li>实体类中的字段</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><pre><code>@Testpublic void testGetUserList()&#123;    SqlSession sqlSession = MybatisUtils.getSession();    UserMapper mapper = sqlSession.getMapper(UserMapper.class);    User user = mapper.getUserById(1);    System.out.println(user);    sqlSession.close();&#125;</code></pre><ul><li>测试结果： 查不出password</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207220006711.png" alt="image-20220722000627560"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from `user` where id = #&#123;id&#125;;</span><br><span class="line">||</span><br><span class="line">select id,name,pwd from `user` where id = #&#123;id&#125;;</span><br></pre></td></tr></table></figure><ul><li>解决方式一：起别名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name,pwd as password from `user` where id = #&#123;id&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>解决方式二：</p><ul><li>resultMap</li></ul></li></ul><p>​            结果集映射</p><pre><code>&lt;!--  结果集映射  --&gt;&lt;resultMap id=&quot;userMap&quot; type=&quot;User&quot;&gt;    &lt;!-- column:数据库中的字段， property: 实体类中的属性 --&gt;    &lt;result column=&quot;pwd&quot; property=&quot;password&quot;/&gt;&lt;/resultMap&gt;&lt;select id=&quot;getUserById&quot; resultMap=&quot;userMap&quot;&gt;    select * from `user` where id = #&#123;id&#125;&lt;/select&gt;</code></pre><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li><li><code>resultMap</code> 能够代替实现同等功能的数千行代码。ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h3><ul><li>对数据库进行操作，出现了异常，我们可以使用日志进行排错。</li></ul><div class="table-container"><table><thead><tr><th>设置名</th><th><strong>描述</strong></th><th>有效值</th><th><strong>默认值</strong></th></tr></thead><tbody><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J \</td><td>LOG4J \</td><td>LOG4J2 \</td><td>JDK_LOGGING \</td><td>COMMONS_LOGGING \</td><td>STDOUT_LOGGING \</td><td>NO_LOGGING</td><td>未设置</td></tr></tbody></table></div><ul><li>STDOUT_LOGGING:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line"> &lt;!-- 标准日志 --&gt;</span><br><span class="line">     &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;</span><br><span class="line"> &lt;/settings&gt;</span><br></pre></td></tr></table></figure><p>输出的日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1259652483.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4b14c583]</span><br><span class="line">==&gt;  Preparing: select * from `user` where id = ?</span><br><span class="line">==&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: 1, 张三, 123456</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">User&#123;id=1, name=&#x27;张三&#x27;, password=&#x27;123456&#x27;&#125;</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4b14c583]</span><br><span class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4b14c583]</span><br><span class="line">Returned connection 1259652483 to pool.</span><br></pre></td></tr></table></figure><h3 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h3><h4 id="LOG4J是什么"><a href="#LOG4J是什么" class="headerlink" title="LOG4J是什么"></a>LOG4J是什么</h4><ul><li>log for java</li><li>Log4j是Apache的一个开源项目,通过使用Log4j,我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等;</li></ul><h4 id="使用LOG4J："><a href="#使用LOG4J：" class="headerlink" title="使用LOG4J："></a>使用LOG4J：</h4><ul><li>导包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>log4j.properties</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="line">log4j.rootLogger=DEBUG,console,file</span><br><span class="line"></span><br><span class="line">#控制台输出的相关设置</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target = System.out</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%c]-%m%n</span><br><span class="line"></span><br><span class="line">#文件输出的相关设置</span><br><span class="line">log4j.appender.file = org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.file.File=./log/nych.log</span><br><span class="line">log4j.appender.file.MaxFileSize=10mb</span><br><span class="line">log4j.appender.file.Threshold=DEBUG</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line"></span><br><span class="line">#日志输出级别</span><br><span class="line">log4j.logger.org.mybatis=DEBUG</span><br><span class="line">log4j.logger.java.sql=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure><ul><li>设置日志以log4j实现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  设置  --&gt;</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><ul><li>LOG4J的使用<ul><li>直接运行测试</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207220013509.png" alt="image-20220722001342363"></p><ul><li><p>简单使用</p><ul><li>在要使用LOG4J的类中，导入org.apache.log4j.Logger</li></ul></li></ul><ul><li>创建日志对象，参数为当前类的class</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static Logger logger = Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure><ul><li>日志级别</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.info(&quot;info:进入testLOG4J&quot;);</span><br><span class="line">logger.debug(&quot;debug:进入了testLOG4J&quot;);</span><br><span class="line">logger.error(&quot;error: 进入了testLOG4J&quot;);</span><br></pre></td></tr></table></figure><h2 id="Mybatis实现分页"><a href="#Mybatis实现分页" class="headerlink" title="Mybatis实现分页"></a>Mybatis实现分页</h2><ul><li>分页可以减少数据查询时间，提高效率</li></ul><h3 id="使用Limit分页"><a href="#使用Limit分页" class="headerlink" title="使用Limit分页"></a>使用Limit分页</h3><ul><li>sql语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from `user` limit start,size</span><br><span class="line"></span><br><span class="line">select * from `user` limit 0,3;</span><br><span class="line">||</span><br><span class="line">select * from `user` limit 3;</span><br></pre></td></tr></table></figure><ul><li>接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//分页</span><br><span class="line">List&lt;User&gt; getUserLimit(Map&lt;String, Integer&gt; map);</span><br></pre></td></tr></table></figure><ul><li>实现接口（UserMapper.xml）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getUserLimit&quot; parameterType=&quot;map&quot; resultMap=&quot;userMap&quot;&gt;</span><br><span class="line">    select * from `user` limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testLimit()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(&quot;start&quot;,0);</span><br><span class="line">    map.put(&quot;size&quot;,2);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = userMapper.getUserLimit(map);</span><br><span class="line">    for (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用RowBounds分页"><a href="#使用RowBounds分页" class="headerlink" title="使用RowBounds分页"></a>使用RowBounds分页</h3><p><strong>不推荐使用</strong></p><ul><li>接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; getUserByRowBounds();</span><br></pre></td></tr></table></figure><ul><li>mapper.xml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getUserByRowBounds&quot; resultMap=&quot;userMap&quot;&gt;</span><br><span class="line">    select * from `user`</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testRowBounds()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">    RowBounds rowBounds = new RowBounds(1,3);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(&quot;com.nych.dao.UserMapper.getUserByRowBounds&quot;, null, rowBounds);</span><br><span class="line"></span><br><span class="line">    for (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><p>pageHelper</p><h2 id="Mybatis注解开发"><a href="#Mybatis注解开发" class="headerlink" title="Mybatis注解开发"></a>Mybatis注解开发</h2><h3 id="注解的基本用法"><a href="#注解的基本用法" class="headerlink" title="注解的基本用法"></a>注解的基本用法</h3><ul><li>使用注解来映射简单语句会使代码显得更加简洁</li><li>但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪</li><li>因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句</li></ul><p>接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  //获取全部用户</span><br><span class="line">@Select(&quot;select * from user&quot;)</span><br><span class="line">  List&lt;User&gt; getUserList();</span><br><span class="line"></span><br><span class="line">//根据用户id查用户</span><br><span class="line">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br><span class="line">User getUserById();</span><br></pre></td></tr></table></figure><p>在核心配置中注册该类:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class=&quot;com.nych.dao.UserMapper&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testGetUserList()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line">    for (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现方法：反射机制实现</p><p>底层：动态代理</p><h3 id="注解实现CRUD"><a href="#注解实现CRUD" class="headerlink" title="注解实现CRUD"></a>注解实现CRUD</h3><p>将SQL改成自动提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static SqlSession getSession()&#123;</span><br><span class="line">    //openSession(true) 开启自动提交</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br><span class="line">    return sqlSession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口加注解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    @Select(&quot;select * from user&quot;)</span><br><span class="line">List&lt;User&gt; getUserList();</span><br><span class="line"></span><br><span class="line">//根据id查找用户</span><br><span class="line">//@Param()注解在多个参数的时候，需要加上； 它可以指定参数名称</span><br><span class="line">@Select(&quot;select id,name,pwd as password from `user` where id = #&#123;userId&#125;&quot;)</span><br><span class="line">User getUserById(@Param(&quot;userId&quot;) int id);</span><br><span class="line"></span><br><span class="line">//使用注解添加一个用户</span><br><span class="line">//引用类型不需要加Param注解</span><br><span class="line">@Insert(&quot;insert into `user` (name,pwd) values(#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br><span class="line">int addUser(User user);</span><br><span class="line"></span><br><span class="line">//使用注解修改一个用户</span><br><span class="line">@Update(&quot;update `user` set `name` = #&#123;name&#125;, `pwd` = #&#123;password&#125; where id = #&#123;id&#125;&quot;)</span><br><span class="line">int updateUser(User user);</span><br><span class="line"></span><br><span class="line">//使用注解删除一个用户</span><br><span class="line">@Delete(&quot;delete from `user` where id = #&#123;id&#125;&quot;)</span><br><span class="line">int deleteUser(@Param(&quot;id&quot;) int id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Param注解：</p><ul><li>基本类型或String 类型，需要加上</li><li>引用类型不需要加</li><li>只有一个参数的时候，可以忽略，建议加上</li><li>sql中引用的参数是@Param中定义的属性名</li></ul><p>{} 和 ${}的区别：</p><ul><li>{} 是 占位符 ：动态解析 -&gt; 预编译 -&gt; 执行</li><li>${} 是 拼接符 ：动态解析 -&gt; 编译 -&gt; 执行</li><li>{} 对应的变量 会 自动加上单引号</li><li>${} 对应的变量 不会 加上单引号</li><li>{}能防止sql 注入</li><li>${}不能防止sql 注入</li><li>能用 #{} 的地方就用 #{}</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">public class UserMapperTest &#123;</span><br><span class="line">    //查询全部用户</span><br><span class="line">@Test</span><br><span class="line">public void testGetUserList()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line"></span><br><span class="line">for (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//根据id查询用户</span><br><span class="line">@Test</span><br><span class="line">public void testGetUserById()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">User user = mapper.getUserById(1);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//添加用户</span><br><span class="line">@Test</span><br><span class="line">public void testAddUser()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">User user = new User(&quot;注解&quot;, &quot;123456&quot;);</span><br><span class="line">int i = userMapper.addUser(user);</span><br><span class="line"></span><br><span class="line">if(i &gt; 0)&#123;</span><br><span class="line">    System.out.println(&quot;成功添加了 &quot; + i + &quot; 个用户！&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    System.out.println(&quot;添加用户失败！&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//修改用户</span><br><span class="line">@Test</span><br><span class="line">public void testUpdateUser()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">User user = new User(3,&quot;注解修改&quot;, &quot;123456&quot;);</span><br><span class="line">int i = userMapper.updateUser(user);</span><br><span class="line"></span><br><span class="line">if(i &gt; 0)&#123;</span><br><span class="line">    System.out.println(&quot;成功修改了 &quot; + i + &quot; 个用户！&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    System.out.println(&quot;修改用户失败！&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除用户</span><br><span class="line">@Test</span><br><span class="line">public void testDeleteUser()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">int i = userMapper.deleteUser(3);</span><br><span class="line"></span><br><span class="line">if (i &gt; 0)&#123;</span><br><span class="line">    System.out.println(&quot;成功删除了 &quot; + i + &quot; 个用户！&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    System.out.println(&quot;删除用户失败！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：接口需要在核心配置文件中注册</p><h2 id="Lombok插件"><a href="#Lombok插件" class="headerlink" title="Lombok插件"></a>Lombok插件</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Project Lombok 是一个 Java 库，可自动插入您的编辑器并构建工具，为您的 Java 增添趣味。<br>永远不要再编写另一个 getter 或 equals 方法，通过一个注释，您的类就有一个功能齐全的构建器，自动化您的日志变量等等。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>在IDEA中下载安装Lombok插件<ul><li>在file -&gt; settings -&gt; plugins 中搜索lombok安装即可。</li></ul></li><li>使用Maven导入lombok的jar包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.18.20&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><p>@Data: 自动生成了无参构造，get, set, toString, hasacode, equals<br>@AllArgsConstructor: 生成有参构造<br>@NoArgsConstructor：生成无参构造</p><h2 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h2><p>多个学生，对应一个老师</p><p>对于学生来说，多个学生关联一个老师（多对一）</p><p>对于老师来说，集合，一个老师有多个学生（一对多）</p><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>新建数据表：</p><p>SQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">create table `teacher`(</span><br><span class="line">id int(10) not null primary key auto_increment,</span><br><span class="line">`name` varchar(30) default null</span><br><span class="line">)ENGINE = INNODB default charset=utf8;</span><br><span class="line"></span><br><span class="line">insert into `teacher` (`name`) values</span><br><span class="line">(&#x27;张老师&#x27;),</span><br><span class="line">(&#x27;李老师&#x27;);</span><br><span class="line"></span><br><span class="line">create table `student`(</span><br><span class="line">id int(10) not null primary key auto_increment,</span><br><span class="line">`name` varchar(30) default null,</span><br><span class="line">`tid` int(10) default null,</span><br><span class="line">key `fktid` (`tid`),</span><br><span class="line">CONSTRAINT `fktid` FOREIGN KEY (`tid`) REFERENCES `teacher`(`id`)</span><br><span class="line">)ENGINE = INNODB default charset=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into `student` (`name`,`tid`) VALUES</span><br><span class="line">(&#x27;小明&#x27;,1),</span><br><span class="line">(&#x27;小红&#x27;,1),</span><br><span class="line">(&#x27;小强&#x27;,1),</span><br><span class="line">(&#x27;小王&#x27;,1);</span><br></pre></td></tr></table></figure><p>新建maven项目</p><p>新建实体类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    //学生需要关联一个老师</span><br><span class="line">    private Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写mapper接口</p><p>写mapper.xml</p><p>在配置文件中注册mapper接口或xml文件</p><p>测试环境</p><h3 id="嵌套查询方式"><a href="#嵌套查询方式" class="headerlink" title="嵌套查询方式"></a>嵌套查询方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;StudentAndTeacher&quot; type=&quot;student&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">    &lt;!--   result 只能处理单个属性，复杂属性，需要单独处理</span><br><span class="line">        对象： association</span><br><span class="line">        集合： collection</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;association property=&quot;teacher&quot; column=&quot;tid&quot; javaType=&quot;teacher&quot; select=&quot;getTeacher&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getStudents&quot; resultMap=&quot;StudentAndTeacher&quot;&gt;</span><br><span class="line">    select * from student</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getTeacher&quot; resultType=&quot;teacher&quot;&gt;</span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  有外键的多表查询： 方法二：  --&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap id=&quot;StudentAndTeacher2&quot; type=&quot;student&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;sid&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;name&quot; column=&quot;sname&quot;/&gt;</span><br><span class="line">    &lt;association property=&quot;teacher&quot; javaType=&quot;teacher&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;tid&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;tname&quot;/&gt;</span><br><span class="line">    &lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getStudents2&quot; resultMap=&quot;StudentAndTeacher2&quot;&gt;</span><br><span class="line">    select s.id as sid, s.name as sname, tid, t.name as tname from student as s, teacher as t where s.tid = t.id</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>Mysql多对一查询方式:</p><ul><li>子查询（嵌套查询）</li><li>联表查询</li></ul><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>一个老师有多个学生，对老师而言就是一对多的关系</p><h3 id="环境搭建-2"><a href="#环境搭建-2" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>实体类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Teacher &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">//一个老师拥有多个学生</span><br><span class="line">private List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;TeacherAndStudents&quot; type=&quot;teacher&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;tid&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;name&quot; column=&quot;tname&quot;/&gt;</span><br><span class="line">    &lt;!--    一对多：集合使用 collection 使用 ofType--&gt;</span><br><span class="line">    &lt;collection property=&quot;students&quot; ofType=&quot;student&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;sid&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;sname&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;tid&quot; column=&quot;tid&quot;/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getTeacher&quot; resultMap=&quot;TeacherAndStudents&quot;&gt;</span><br><span class="line">    select s.id as sid, s.name as sname, t.id as tid, t.name as tname</span><br><span class="line">    from student as s, teacher as t</span><br><span class="line">    where t.id = s.tid and t.id = #&#123;tid&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>11.2 方法二</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;TeacherAndStudents2&quot; type=&quot;teacher&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">    &lt;collection property=&quot;students&quot; column=&quot;id&quot; javaType=&quot;ArrayList&quot; ofType=&quot;student&quot; select=&quot;getStudent&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getTeacher2&quot; resultMap=&quot;TeacherAndStudents2&quot;&gt;</span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;getStudent&quot; resultType=&quot;student&quot;&gt;</span><br><span class="line">    select * from student where tid = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>11.3 总结<br>关联 association（多对一）</li><li>集合 collection (一对多)</li><li>javaType 和 ofType<ul><li>javaType 用来指定实体类总属性的类型</li><li>ofType 用来指定映射到List或集合中的pojo类型，泛型中的约束类型</li></ul></li></ul><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>根据不同的条件生成不同的sql语句</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><h3 id="环境搭建-3"><a href="#环境搭建-3" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li>创建数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `blog`(</span><br><span class="line">`id` int(30) NOT NULL primary key auto_increment COMMENT &#x27;博客id&#x27;,</span><br><span class="line">`title` VARCHAR(100) NOT NULL COMMENT &#x27;博客标题&#x27;,</span><br><span class="line">`author` VARCHAR(30) NOT NULL COMMENT &#x27;博客作者&#x27;,</span><br><span class="line">`create_time` DATETIME NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">`views` INT(30) NOT NULL COMMENT &#x27;浏览量&#x27;</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- if 查询  --&gt;</span><br><span class="line">&lt;select id=&quot;queryBlogIf&quot; parameterType=&quot;map&quot; resultType=&quot;blog&quot;&gt;</span><br><span class="line">    select * from mybatis.blog where 1 = 1</span><br><span class="line">    &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;author != null&quot;&gt;</span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;queryBlogIf&quot; parameterType=&quot;map&quot; resultType=&quot;blog&quot;&gt;</span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;author != null&quot;&gt;</span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h3><ul><li>choose (when, otherwise)</li><li>类似于switch(case, default)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  choose 查询  --&gt;</span><br><span class="line">&lt;select id=&quot;queryBlogChoose&quot; parameterType=&quot;map&quot; resultType=&quot;blog&quot;&gt;</span><br><span class="line">    select * from blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;choose&gt;</span><br><span class="line">            &lt;when test=&quot;title != null&quot;&gt;</span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;when test=&quot;author != null&quot;&gt;</span><br><span class="line">                author = #&#123;author&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;otherwise&gt;</span><br><span class="line">                views &gt; #&#123;views&#125;</span><br><span class="line">            &lt;/otherwise&gt;</span><br><span class="line">        &lt;/choose&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h3><p><strong>Set:</strong></p><ul><li>动态的在语句前添加set关键字</li><li>自动删除无用的逗号</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  更新  --&gt;</span><br><span class="line">&lt;update id=&quot;updateBlog&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    update blog</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;author != null&quot;&gt;</span><br><span class="line">            author = #&#123;author&#125;,</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;views != null&quot;&gt;</span><br><span class="line">            views = #&#123;views&#125;,</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><p><strong>Where:</strong></p><ul><li>如果只有一个条件，可以不写and</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select * from blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;choose&gt;</span><br><span class="line">            &lt;when test=&quot;title != null&quot;&gt;</span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;when test=&quot;author != null&quot;&gt;</span><br><span class="line">                author = #&#123;author&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;otherwise&gt;</span><br><span class="line">                views &gt; #&#123;views&#125;</span><br><span class="line">            &lt;/otherwise&gt;</span><br><span class="line">        &lt;/choose&gt;</span><br><span class="line">    &lt;/where&gt;</span><br></pre></td></tr></table></figure><ul><li>如果可能有多个条件，可以去除多余的and</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;queryBlogIf&quot; parameterType=&quot;map&quot; resultType=&quot;blog&quot;&gt;</span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">            and title = #&#123;title&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;author != null&quot;&gt;</span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>trim:</p><ul><li>自定义功能</li><li>trim 可以完成 where 和 set 的功能</li></ul><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><ul><li>将一些重复的sql提取出来，定义一个sql片段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql id=&quot;if-title-author&quot;&gt;</span><br><span class="line">    &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">        title = #&#123;title&#125;,</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;author != null&quot;&gt;</span><br><span class="line">        author = #&#123;author&#125;,</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;views != null&quot;&gt;</span><br><span class="line">        views = #&#123;views&#125;,</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/sql&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  更新  --&gt;</span><br><span class="line">&lt;update id=&quot;updateBlog&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    update blog</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;!--  引用 SQL片段  --&gt;</span><br><span class="line">        &lt;include refid=&quot;if-title-author&quot;/&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207220045200.png" alt="在这里插入图片描述"></p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;queryBlogForEach&quot; parameterType=&quot;map&quot; resultType=&quot;blog&quot;&gt;</span><br><span class="line">    select * from blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;foreach collection=&quot;authors&quot; item=&quot;author&quot; open=&quot;author in(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">            #&#123;author&#125;</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//测试foreach</span><br><span class="line">@Test</span><br><span class="line">public void testForEach()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper blogMapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    HashMap map = new HashMap();</span><br><span class="line">    ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">    list.add(&quot;nych&quot;);</span><br><span class="line">    list.add(&quot;nyc&quot;);</span><br><span class="line">    list.add(&quot;nn&quot;);</span><br><span class="line"></span><br><span class="line">    map.put(&quot;authors&quot;,list);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; blogs = blogMapper.queryBlogForEach(map);</span><br><span class="line">    for (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果authors为空的sql语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from blog</span><br></pre></td></tr></table></figure><p>authors不为空的sql语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from blog WHERE author in( ? , ? , ? )</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><ul><li>可以创建一个变量，来保存需要的内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogsLike&quot; resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  &lt;bind name=&quot;pattern&quot; value=&quot;&#x27;%&#x27; + _parameter.getTitle() + &#x27;%&#x27;&quot; /&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>查询时： 连接数据库，再查数据； 耗资源</li><li>那么，将一次的查询结果，暂存到内存，我们再次查询相同数据时，直接走缓存； 提高效率</li></ul><p><strong>什么是缓存：</strong></p><ul><li><p>存在内存的临时数据。</p></li><li><p>将用户经常查询的数据放到缓存（内存）中，用户查询数据时就不需要再从数据库中查数据了，直接从缓存中查询，从而提高效率，解决高并发系统的性能问题</p></li><li><p>减少和数据库的交互次数，减少系统开销，提高系统效率</p></li><li><p>经常查询不经常改变的数据，使用缓存</p></li><li><p>经常修改的数据，不建议使用缓存</p></li></ul><h3 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h3><ul><li>MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。</li><li><p>MyBatis系统中默认定义了两级缓存： 一级缓存和二级缓存</p><ul><li>默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。</li><li>要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache/&gt;</span><br></pre></td></tr></table></figure><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li>一级缓存也叫本地缓存</li><li>默认开启，在一个sqlSession中有效</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">//两次查询同一个用户    </span><br><span class="line">    User user1 = userMapper.getUserById(1);</span><br><span class="line">    System.out.println(&quot;user1 = &quot; + user1);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;-----------------------------------------&quot;);</span><br><span class="line"></span><br><span class="line">    User user2 = userMapper.getUserById(1);</span><br><span class="line">    System.out.println(&quot;user2 = &quot; + user2);</span><br><span class="line">//引用是否相同</span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接一次数据库，执行一遍sql语句</p><p>第二次直接从缓存中获取</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207220049318.png" alt="image-20220722004932122"></p><ul><li><p>所有 select 语句的结果将会被缓存。</p></li><li><p>所有 insert、update 和 delete 语句会刷新缓存。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207220049545.png" alt="image-20220722004954353"></p><ul><li><p>缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。</p></li><li><p>缓存不会定时进行刷新（也就是说，没有刷新间隔）。</p></li><li><p>缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。</p></li><li><p>缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。</p></li></ul><p>手动清理缓存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.clearCache();</span><br></pre></td></tr></table></figure><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li>二级缓存也叫全局缓存，作用域比一级缓存的高</li><li><p>在一个namaspace中有效，一个命名空间，对应一个二级缓存</p></li><li><p>工作方式</p><ul><li>一个会话查询一条数据后，数据会被放到当前会话的一级缓存中</li><li>如果会话关闭了， 这个会话对应的一级缓存中的数据会被保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取数据</li><li>不同的mapper查出的数据存放到自己对应的缓存中</li></ul></li></ul><p>要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache/&gt;</span><br></pre></td></tr></table></figure><p>这些属性可以通过 cache 元素的属性来修改。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache</span><br><span class="line">  eviction=&quot;FIFO&quot;</span><br><span class="line">  flushInterval=&quot;60000&quot;</span><br><span class="line">  size=&quot;512&quot;</span><br><span class="line">  readOnly=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</p><p><strong>清除策略：</strong></p><ul><li>LRU – 最近最少使用：移除最长时间不被使用的对象。</li><li>FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</li><li>SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li>WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><p><strong>默认的清除策略是 LRU。</strong></p><ul><li><strong>flushInterval（刷新间隔）：</strong>属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</li><li><strong>size（引用数目）：</strong>属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</li><li><strong>readOnly（只读）：</strong>属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</li></ul><p><strong>提示</strong>： 二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。</p><p><strong>测试：</strong></p><pre><code>@Testpublic void TestCache()&#123;    SqlSession sqlSession = MybatisUtils.getSession();    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);    User user = userMapper.getUserById(1);    System.out.println(&quot;user = &quot; + user);    sqlSession.close();    SqlSession sqlSession1 = MybatisUtils.getSession();    UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);    User user1 = userMapper1.getUserById(1);    System.out.println(&quot;user1 = &quot; + user1);    System.out.println(user == user1);    sqlSession1.close();&#125;</code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/chahua202207220053034.png" alt="image-20220722005307819"></p><p>注意：</p><ul><li>如果开启二级缓存时，没有设置任何参数，实体类需要实现序列号接口（Serializable）</li></ul><h3 id="自定义缓存-ehcache"><a href="#自定义缓存-ehcache" class="headerlink" title="自定义缓存 ehcache"></a>自定义缓存 ehcache</h3><ul><li>Ehcache 是一种广泛使用的开源Java分布式缓存，主要面向通用缓存</li></ul><p><strong>导包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:noNamespaceSchemaLocation=&quot;http://ehcache.org/ehcache.xsd&quot;</span><br><span class="line">        updateCheck=&quot;false&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;diskStore path=&quot;./tmpdir/Tmp_EhCache&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;defaultCache</span><br><span class="line">eternal=&quot;false&quot;</span><br><span class="line">maxElementsInMemory=&quot;10000&quot;</span><br><span class="line">        overflowToDisk=&quot;false&quot;</span><br><span class="line">        diskPersistent=&quot;false&quot;</span><br><span class="line">        timeToIdleSeconds=&quot;1800&quot;</span><br><span class="line">        timeToLiveSeconds=&quot;259200&quot;</span><br><span class="line">        memoryStoreEvictionPolicy=&quot;LRU&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">&lt;cache</span><br><span class="line">name=&quot;cloud_user&quot;</span><br><span class="line">eternal=&quot;false&quot;</span><br><span class="line">maxElementsInMemory=&quot;5000&quot;</span><br><span class="line">        overflowToDisk=&quot;false&quot;</span><br><span class="line">        diskPersistent=&quot;false&quot;</span><br><span class="line">        timeToIdleSeconds=&quot;1800&quot;</span><br><span class="line">        timeToLiveSeconds=&quot;1800&quot;</span><br><span class="line">        memoryStoreEvictionPolicy=&quot;LRU&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>速度上会慢一些，但是更安全，因此默认值是 false。</p><p><strong>提示</strong>： 二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。</p><p>测试：</p><pre><code>@Testpublic void TestCache()&#123;    SqlSession sqlSession = MybatisUtils.getSession();    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);    User user = userMapper.getUserById(1);    System.out.println(&quot;user = &quot; + user);    sqlSession.close();    SqlSession sqlSession1 = MybatisUtils.getSession();    UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);    User user1 = userMapper1.getUserById(1);    System.out.println(&quot;user1 = &quot; + user1);    System.out.println(user == user1);    sqlSession1.close();&#125;</code></pre><p>注意：</p><ul><li>如果开启二级缓存时，没有设置任何参数，实体类需要实现序列号接口（Serializable）</li></ul><p><strong>目前：Redis数据库来做缓存！K-V</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/posts/4780.html"/>
      <url>/posts/4780.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SrpingMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/posts/18155.html"/>
      <url>/posts/18155.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Srping </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/posts/9355.html"/>
      <url>/posts/9355.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/posts/60206.html"/>
      <url>/posts/60206.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="什么是JavaWeb"><a href="#什么是JavaWeb" class="headerlink" title="什么是JavaWeb"></a>什么是JavaWeb</h2><h3 id="Javeweb基本概念"><a href="#Javeweb基本概念" class="headerlink" title="Javeweb基本概念"></a>Javeweb基本概念</h3><p> <strong>用Java技术来解决相关web互联网领域的技术栈</strong>。web包括：<strong>Web服务端</strong>和<strong>Web客户端</strong>两部分。Java在客户端的应用有Java Applet，<strong>现如今基本上已经淘汰</strong>。Java服务端的应用非常的丰富，<strong>比如Servlet，JSP、Thymeleaf、Apache Freemark、第三方框架（Spring）等</strong>。Java技术对Web领域的发展注入了强大的动力，也是起成为经久不衰的今典高级开发语言。</p><h3 id="静态Web"><a href="#静态Web" class="headerlink" title="静态Web"></a>静态Web</h3><p> <strong>界面内容固定，不会根据时效性、用户类型、权限等动态刷新界面所显示内容</strong>。<br><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152105901.png" alt="eb08bc92a05872e9f999c5c32917961"></p><ul><li><p>静态web存在的缺点</p><ul><li>Web页面无法动态更新，所有用户看到都是同一个页面<ul><li>轮播图，点击特效：伪动态</li><li>JavaScript实际开发中，它用的最多</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）<h3 id="动态Web"><a href="#动态Web" class="headerlink" title="动态Web"></a>动态Web</h3><strong>界面内容不固定，动态实时改变所呈现的界面内容信息。</strong><br><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152105196.png" alt="bd3a8f6a0f160874c49cb4e80670d2d"><br>动态Web存在的缺点：</li></ul></li><li><p>加入服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布；</p><ul><li>停机维护优点：</li></ul></li><li>Web页面可以动态更新，所有用户看到都不是同一个页面</li><li>它可以与数据库交互（数据持久化：注册，商品信息，用户信息………）<h2 id="什么是B-S、C-S结构？"><a href="#什么是B-S、C-S结构？" class="headerlink" title="什么是B/S、C/S结构？"></a>什么是B/S、C/S结构？</h2></li></ul><h3 id="C-S结构"><a href="#C-S结构" class="headerlink" title="C/S结构"></a>C/S结构</h3><p>C/S(Client/Server)：<strong>又称客户/服务器模式</strong>。服务器通常采用高性能的PC、工作站或小型机，并采用大型数据库系统，如Oracle、Sql Server等。客户端需要安装专用的客户端软件，结果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152109225.png" alt="6948039e3384943336ff08a6a2f9d81"></p><p>优点：</p><ul><li><strong>安全性：</strong>需要其特定的客户端，所以面向对象比较确定，将所进行的信息安全处于一个可控的范围</li><li><strong>效率：</strong>客户端的服务器直接相连，省却了中间环节，数据的传输比较快</li><li>个性化：有特定的客户端，所以可以在较大程度上满足客户的个性化要求</li><li>稳定性：结构比较稳定，有较强的事务处理能力，可以实现较复杂的业务逻辑</li></ul><p>缺点：</p><ul><li><strong>特定的客户端</strong>：对客户端有一定的要求，如：操作系统，并且它就像订在墙上的石头桌子，不可再利用</li><li>中间环节：因为省却了中间环节，所以当客户端达到一定的量时，同时访问服务器，造成服务器的相应变慢，效率变低</li></ul><h3 id="B-S结构"><a href="#B-S结构" class="headerlink" title="B/S结构"></a>B/S结构</h3><p>B/S（Browser/Server）：<strong>又称浏览器/服务器模式。是WEB兴起后的一种网络结构模式，</strong>WEB浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。客户机上只要安装一个浏览器，如Internet Explorer，服务器安装SQL Server、Oracle、MYSQL等数据库。浏览器通过Web Server 同数据库进行数据交互。</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152109816.png" alt="8198e4db401ba2be44909a0eeacfa69"></p><p>优点:</p><ul><li>范围广：零安装，拥有一个浏览器，即可访问，面向的范围更广</li><li>维护性：维护简单，更新页面，即可实现面向所有用户的更新</li><li>共享性：通过浏览器访问，共享性强，就像买来的餐桌，可以再利用</li></ul><p>缺点:</p><ul><li>在跨浏览器上，BS架构不尽如人意。</li><li>表现要达到CS程序的程度需要花费不少精力。</li><li>在速度和安全性上需要花费巨大的设计成本，这是BS架构的最大问题。</li><li>客户端服务器端的交互是请求-响应模式，通常需要刷新页面，这并不是客户乐意看到的。</li></ul><h2 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h2><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；<br><strong>lIS</strong><br>微软的；ASP.,Windows中自带的<br><strong>Tomcat</strong><br><img src="https://img-blog.csdnimg.cn/20200423183331323.png" border="0" /></p><p>Tomcat是Apache 软件基金会（Apache Software Foundation)的jakarta项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受lava爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP程序的首选。对于一个Java初学web的人来说，它是最佳的选择。</p><p>成为大佬之后可尝试进行手写Tomcat</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>下载Tomcat：</p><ol><li>安装Tomcat:</li><li>了解配置文件及目录文件的结构</li><li>还要了解Tomcat的作用</li></ol><h4 id="Tomcat的安装"><a href="#Tomcat的安装" class="headerlink" title="Tomcat的安装"></a>Tomcat的安装</h4><p>Tomcat的官网: <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012468.png" /><br>进行解压<br><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012469.png" /></p><h4 id="Tomcat的启动和环境变量配置"><a href="#Tomcat的启动和环境变量配置" class="headerlink" title="Tomcat的启动和环境变量配置"></a>Tomcat的启动和环境变量配置</h4><p>Tomcat文件夹的作用:<br><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012472.png" /><br>启动Tomcat和关闭Tomcat<br><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012471.png" /></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>可能遇到的问题：</p><ol><li>Java环境变量没有配置</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><p>可以修改 conf/logging.properties 中的 java.util.logging.ConsoleHandler.encoding = GBK <strong>解决乱码问题</strong></p><h4 id="Tomcat的配置"><a href="#Tomcat的配置" class="headerlink" title="Tomcat的配置"></a>Tomcat的配置</h4><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012470.png" /></p><p>可以配置启动的端口号</p><ul><li>tomcat的默认端口号为：8080</li><li>mysql:3306</li><li>http:80</li><li>https：443</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">      connectionTimeout=&quot;20000&quot;</span><br><span class="line">      redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><p>可以配置主机的名称</p><ul><li>默认的主机名为：localhost-&gt;127.0.0.1</li><li>默认网站应用存放的位置为：webapps</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;www.qinjiang.com&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">      unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="发布一个web网站"><a href="#发布一个web网站" class="headerlink" title="发布一个web网站"></a>发布一个web网站</h4><ul><li>将自己写的网站，放到服务器（Tomcat)中指定的web应用的文件夹（webapps)下，就可以访问了</li></ul><p>网站应该有的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--webapps ：Tomcat服务器的web目录</span><br><span class="line">-ROOT</span><br><span class="line">-linglanstudy ：网站的目录名</span><br><span class="line">- WEB-INF</span><br><span class="line">-classes : java程序</span><br><span class="line">-lib：web应用所依赖的jar包</span><br><span class="line">-web.xml ：网站配置文件</span><br><span class="line">- index.html 默认的首页</span><br><span class="line">- static </span><br><span class="line">            -css</span><br><span class="line">            -style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br><span class="line">         -.....</span><br></pre></td></tr></table></figure><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><h3 id="什么是HTTP"><a href="#什么是HTTP" class="headerlink" title="什么是HTTP"></a>什么是HTTP</h3><p>(超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><ul><li>文本：html，字符串，…</li><li>超文本：图片，音乐，视频，定位，地图.……</li><li>端口:80</li></ul><p>Https:安全的</p><h3 id="两个时代"><a href="#两个时代" class="headerlink" title="两个时代"></a>两个时代</h3><ul><li>http1.0<ul><li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li></ul></li><li>http2.0<ul><li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。<h3 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h3></li></ul></li><li>客户端–发请求（Request）–服务器</li></ul><p>哔哩哔哩:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Request URL:https://www.bilibili.com/</span><br><span class="line">Request Method:GET</span><br><span class="line">Status Code:200</span><br><span class="line">Remote Address:127.0.0.1:7890</span><br><span class="line"></span><br><span class="line">Accept:text/html  </span><br><span class="line">accept-encoding:gzip, deflate, br</span><br><span class="line">accept-language:zh-CN,zh;q=0.9</span><br><span class="line">Cache-Control:max-age=0</span><br></pre></td></tr></table></figure></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><ul><li>请求行中的请求方式：GET</li><li>请求方式：Get,Post,HEAD,DELETE,PUT,TRACT.…<ul><li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li><li>post:请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li></ul></li></ul><h4 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1</span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br></pre></td></tr></table></figure><h3 id="Http响应"><a href="#Http响应" class="headerlink" title="Http响应"></a>Http响应</h3><p>哔哩哔哩:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cache-control:no-cache                  缓存控制</span><br><span class="line">content-encoding:gzip                   编码</span><br><span class="line">content-type:text/html; charset=utf-8   类型</span><br></pre></td></tr></table></figure></p><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1</span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br><span class="line">Refresh：告诉客户端，多久刷新一次；</span><br><span class="line">Location：让网页重新定位；</span><br></pre></td></tr></table></figure><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><p>200：请求响应成功200<br>3xx:请求重定向·重定向：你重新到我给你新位置去；<br>4xx:找不到资源404·资源不存在；<br>5xx:服务器代码错误 500 502:网关错误</p><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p><strong>我为什么要学习这个技术？</strong></p><ol><li>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</li><li>如何能够让一个东西自动帮我导入和配置这个jar包。</li></ol><h3 id="Maven项目框架管理工具"><a href="#Maven项目框架管理工具" class="headerlink" title="Maven项目框架管理工具"></a>Maven项目框架管理工具</h3><p>我们目前用来就是方便导入jar包的！<br>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反。</li></ul><p>Maven会规定好你该如何去编写我们Java代码，必须要按照这个规范来；</p><h3 id="下载Maven和安装Maven"><a href="#下载Maven和安装Maven" class="headerlink" title="下载Maven和安装Maven"></a>下载Maven和安装Maven</h3><p>Maven官网: <a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012474.png" /></p><p>下载完成后，解压即可；</p><h3 id="配置Maven环境变量"><a href="#配置Maven环境变量" class="headerlink" title="配置Maven环境变量"></a>配置Maven环境变量</h3><p>在我们的系统环境变量中配置如下配置：</p><ul><li>M2_HOME maven目录下的bin目录</li><li>MAVEN_HOME maven的目录</li><li>在系统的path中配置%MAVEN_HOME%\bin</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152023566.png" alt="10ee5266c247156a9cb2e8ac077917a"></p><p>检查Maven命令 <code>mvn -version</code><br>测试Maven是否安装成功，保证必须配置完毕！</p><h3 id="阿里云镜像"><a href="#阿里云镜像" class="headerlink" title="阿里云镜像"></a>阿里云镜像</h3><ul><li>镜像：mirrors</li><li>作用：加速我们的下载</li><li>国内建议使用阿里云的镜像</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><p>在本地的仓库，远程仓库； 建立一个本地仓库：localRepository</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.6.2\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建一个maven项目"><a href="#创建一个maven项目" class="headerlink" title="创建一个maven项目"></a>创建一个maven项目</h3><ol><li>启动idea</li><li>创建一个maven web项目</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152024923.png" alt="image-20210821112933801"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152025557.png" alt="image-20210821142829865"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152025000.png" alt="image-20210821143047701"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152025791.png" alt="image-20210821113859409"></p><p>等待项目初始化完毕</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152026137.png" alt="image-20210821114719623"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152026162.png" alt="image-20220715202654106"></p><p>idea中maven设置</p><p>idea项目创建成功后，看一眼Maven的配置</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152027035.png" alt="image-20210821143805967"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152028481.png" alt="image-20220715202808421"></p><p>这个只有在web应用下才会有</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152028984.png" alt="image-20220715202846924"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152029806.png" alt="image-20220715202932743"></p><p><strong>方法【2】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152030851.png" alt="image-20220715203003778"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152030842.png" alt="image-20220715203027768"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152030098.png" alt="image-20220715203047037"></p><h3 id="在idea中配置tomcat"><a href="#在idea中配置tomcat" class="headerlink" title="在idea中配置tomcat"></a>在idea中配置tomcat</h3><ol><li>点击下面这里</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152031889.png" alt="image-20220715203155829"></p><p>2.点击加号，【tomcat service】 —》【local】</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152032520.png" alt="image-20220715203241457"></p><p>3.配置tomcat服务器</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152033589.png" alt="image-20220715203305522"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152033067.png" alt="image-20220715203318005"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152033724.png" alt="image-20220715203327661"></p><p>4.启动tomcat</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152034117.png" alt="image-20220715203406061"></p><h3 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h3><p>pom.xml是maven的核心配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152035466.png" alt="image-20220715203517393"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--maven版本和头文件--&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--这里就是我们配置的gav--&gt;</span><br><span class="line">  &lt;groupId&gt;com.linglan&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javaweb-maven&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;!--packaging  项目的方法方式</span><br><span class="line">    jar:jar应用</span><br><span class="line">    war:javaWeb应用</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;javaweb-maven Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br><span class="line">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--配置--&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;!--项目的默认构建编码--&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;!--编码版本--&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--项目依赖--&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--项目构建用的东西--&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;javaweb-maven&lt;/finalName&gt;</span><br><span class="line">    &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line">    &lt;/pluginManagement&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>maven的高级之初在于它会帮你导入这个jar包所依赖的其他jar包</strong></p><p>maven由于他的约定大于配置，我们之后可能会遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在build中配置resources,来防止我们资源导出失败的问题--&gt;  </span><br><span class="line">&lt;build&gt; </span><br><span class="line">  &lt;resources&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">      &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">      &lt;includes&gt;</span><br><span class="line">        &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">        &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">      &lt;/includes&gt;</span><br><span class="line">      &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">    &lt;/resource&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">      &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">      &lt;includes&gt;</span><br><span class="line">        &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">        &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">      &lt;/includes&gt;</span><br><span class="line">      &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">    &lt;/resource&gt;</span><br><span class="line">  &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="idea操作"><a href="#idea操作" class="headerlink" title="idea操作"></a>idea操作</h3><p>目录树</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152037177.png" alt="image-20220715203746124"></p><p>maven中jar的联系关联图</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152037684.png" alt="image-20220715203759632"></p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h3><ul><li>Servlet就是sun公司开发动态web的一门技术</li><li>Sun在这些APi中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<ul><li>编写一个类，实现Serlet接口</li><li>把开发好java类部署到web服务器中。</li></ul></li></ul><p>把实现了Servlet接口的Java程序叫做，Servlet</p><h3 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h3><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServled</p><ol><li>构建一个普通的Maven项目，等理面的sc目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就题Maven主工程；</li><li>关于Maven父子工程的理解；  </li></ol><p>父项目中会有:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目中会有：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.linglan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目中的 Java 子项目可以直接使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure><ol><li><p>Maven环境优化</p><ol><li>修改web.xml为最新的</li><li>将maven的结构搭建完整</li></ol></li><li><p>编写一个Servlet程序</p><p> <img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152042900.png" alt="image-20210822154732934"></p><p> <img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152040134.png" alt="image-20220715204047068"></p><ol><li>编写一个普通类</li><li>实现Servlet接口，这里我们直接继承HttpServlet</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">    </span><br><span class="line">    //由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //ServletOutputStream outputStream = resp.getOutputStream();</span><br><span class="line">        PrintWriter writer = resp.getWriter(); //响应流</span><br><span class="line">        writer.print(&quot;Hello,Serlvet&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>编写 Servlet 的映射<br>为什么需要映射：我们写的是 Java 程序，但是要通过浏览器访问，而浏览器需要连接 Web 服务器，所以我们需要再 Web 服务中注册我们写的 Servlet，还需给他一个浏览器能够访问的路径；</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注册Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.linglan.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>配置 Tomcat<br>点击编辑，+ 号，选择本地的 Tomcat</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152041511.png" alt="image-20220715204139428"></p><ol><li>启动测试！</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152044650.png" alt="image-20210822163233073"></p><h3 id="Servlet-原理"><a href="#Servlet-原理" class="headerlink" title="Servlet 原理"></a>Servlet 原理</h3><p>Servlet 是由 Web 服务器调用，Web 服务器在收到浏览器请求之后，会：</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012489.png" alt="img"></p><h3 id="Mapping问题"><a href="#Mapping问题" class="headerlink" title="Mapping问题"></a>Mapping问题</h3><ol><li>一个Servlet可以指定一个映射路径</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>一个Servlet可以指定一个映射路径</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello1&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello2&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello3&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello4&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello5&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>一个Servlet也可以指定通过映射路径</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>默认请求路径</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--默认请求路径--&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>指定一些后缀或者前缀等…</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--可以自定义后缀实现请求映射</span><br><span class="line">    注意点，*前面不能加项目映射的路径</span><br><span class="line">    hello/sajdlkajda.qinjiang</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.qinjiang&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--404--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;error&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.linglan.servlet.ErrorServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;error&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>Web 容器在启动的时候，它会为每个 Web 程序都创建一个对应的 ServletContext 对象，它代表了当前的 Web 应用;</p><h4 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h4><p>在一个 servlet 中保存的数据，可以在另一个 servlet 中拿到；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        //this.getInitParameter()   初始化参数</span><br><span class="line">        //this.getServletConfig()   Servlet配置</span><br><span class="line">        //this.getServletContext()  Servlet上下文</span><br><span class="line">        ServletContext context = this.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = &quot;秦疆&quot;; //数据</span><br><span class="line">        context.setAttribute(&quot;username&quot;,username); //将一个数据保存在了ServletContext中，名字为：username 。值 username</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class GetServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext context = this.getServletContext();</span><br><span class="line">        String username = (String) context.getAttribute(&quot;username&quot;);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(&quot;text/html&quot;);</span><br><span class="line">        resp.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        resp.getWriter().print(&quot;名字&quot;+username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.linglan.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;getc&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.linglan.servlet.GetServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;getc&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/getc&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取初始化参数"><a href="#获取初始化参数" class="headerlink" title="获取初始化参数"></a>获取初始化参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置一些web应用初始化参数--&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;url&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;jdbc:mysql://localhost:3306/mybatis&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    ServletContext context = this.getServletContext();</span><br><span class="line">    String url = context.getInitParameter(&quot;url&quot;);</span><br><span class="line">    resp.getWriter().print(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    ServletContext context = this.getServletContext();</span><br><span class="line">    System.out.println(&quot;进入了ServletDemo04&quot;);</span><br><span class="line">    //RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径</span><br><span class="line">    //requestDispatcher.forward(req,resp); //调用forward实现请求转发；</span><br><span class="line">    context.getRequestDispatcher(&quot;/gp&quot;).forward(req,resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012495.png" alt="img"></p><h4 id="读取资源文件"><a href="#读取资源文件" class="headerlink" title="读取资源文件"></a>读取资源文件</h4><p>Properties</p><ul><li>在 java 目录下新建 properties</li><li>在 resources 目录下新建 properties</li></ul><p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p><p>思路：需要一个文件流；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uername=name</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ServletDemo05 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        InputStream is = this.getServletContext().getResourceAsStream(&quot;/WEB-INF/classes/com/linglan/servlet/aa.properties&quot;);</span><br><span class="line"></span><br><span class="line">        Properties prop = new Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String user = prop.getProperty(&quot;username&quot;);</span><br><span class="line">        String pwd = prop.getProperty(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(user+&quot;:&quot;+pwd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>Web 服务器接收到客户端的 http 请求，针对这个请求，分别创建一个代表请求的 HttpServletRequest 对象，代表响应的一个 HttpServletResponse；</p><ul><li>如果想要获取客户端请求过来的参数：找 HttpServletRequest</li><li>如果要给客户端响应一些信息：找 HttpServletResponse</li></ul><h4 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h4><p>负责向浏览器发送数据的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServletOutputStream getOutputStream() throws IOException;</span><br><span class="line">PrintWriter getWriter() throws IOException;</span><br></pre></td></tr></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void setCharacterEncoding(String var1);</span><br><span class="line"></span><br><span class="line">void setContentLength(int var1);</span><br><span class="line"></span><br><span class="line">void setContentLengthLong(long var1);</span><br><span class="line"></span><br><span class="line">void setContentType(String var1);</span><br><span class="line"></span><br><span class="line">void setDateHeader(String var1, long var2);</span><br><span class="line"></span><br><span class="line">void addDateHeader(String var1, long var2);</span><br><span class="line"></span><br><span class="line">void setHeader(String var1, String var2);</span><br><span class="line"></span><br><span class="line">void addHeader(String var1, String var2);</span><br><span class="line"></span><br><span class="line">void setIntHeader(String var1, int var2);</span><br><span class="line"></span><br><span class="line">void addIntHeader(String var1, int var2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>响应的状态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">int SC_CONTINUE = 100;</span><br><span class="line">   int SC_SWITCHING_PROTOCOLS = 101;</span><br><span class="line">   int SC_OK = 200;</span><br><span class="line">   int SC_CREATED = 201;</span><br><span class="line">   int SC_ACCEPTED = 202;</span><br><span class="line">   int SC_NON_AUTHORITATIVE_INFORMATION = 203;</span><br><span class="line">   int SC_NO_CONTENT = 204;</span><br><span class="line">   int SC_RESET_CONTENT = 205;</span><br><span class="line">   int SC_PARTIAL_CONTENT = 206;</span><br><span class="line">   int SC_MULTIPLE_CHOICES = 300;</span><br><span class="line">   int SC_MOVED_PERMANENTLY = 301;</span><br><span class="line">   int SC_MOVED_TEMPORARILY = 302;</span><br><span class="line">   int SC_FOUND = 302;</span><br><span class="line">   int SC_SEE_OTHER = 303;</span><br><span class="line">   int SC_NOT_MODIFIED = 304;</span><br><span class="line">   int SC_USE_PROXY = 305;</span><br><span class="line">   int SC_TEMPORARY_REDIRECT = 307;</span><br><span class="line">   int SC_BAD_REQUEST = 400;</span><br><span class="line">   int SC_UNAUTHORIZED = 401;</span><br><span class="line">   int SC_PAYMENT_REQUIRED = 402;</span><br><span class="line">   int SC_FORBIDDEN = 403;</span><br><span class="line">   int SC_NOT_FOUND = 404;</span><br><span class="line">   int SC_METHOD_NOT_ALLOWED = 405;</span><br><span class="line">   int SC_NOT_ACCEPTABLE = 406;</span><br><span class="line">   int SC_PROXY_AUTHENTICATION_REQUIRED = 407;</span><br><span class="line">   int SC_REQUEST_TIMEOUT = 408;</span><br><span class="line">   int SC_CONFLICT = 409;</span><br><span class="line">   int SC_GONE = 410;</span><br><span class="line">   int SC_LENGTH_REQUIRED = 411;</span><br><span class="line">   int SC_PRECONDITION_FAILED = 412;</span><br><span class="line">   int SC_REQUEST_ENTITY_TOO_LARGE = 413;</span><br><span class="line">   int SC_REQUEST_URI_TOO_LONG = 414;</span><br><span class="line">   int SC_UNSUPPORTED_MEDIA_TYPE = 415;</span><br><span class="line">   int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;</span><br><span class="line">   int SC_EXPECTATION_FAILED = 417;</span><br><span class="line">   int SC_INTERNAL_SERVER_ERROR = 500;</span><br><span class="line">   int SC_NOT_IMPLEMENTED = 501;</span><br><span class="line">   int SC_BAD_GATEWAY = 502;</span><br><span class="line">   int SC_SERVICE_UNAVAILABLE = 503;</span><br><span class="line">   int SC_GATEWAY_TIMEOUT = 504;</span><br><span class="line">   int SC_HTTP_VERSION_NOT_SUPPORTED = 505;</span><br></pre></td></tr></table></figure><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><p>给浏览器输出消息</p><p>下载文件</p><p>1.要获取下载文件的路径<br>2.下载的文件名是什么？<br>3.设置浏览器使其支持下载的内容<br>4.获取下载文件的输入流<br>5.创建缓冲区<br>6.获取 OutputStream 对象<br>7.将 FileOutputStream 写入到 buffer缓冲区<br>8.使用 OutputStream 将缓冲区中的数据输出到客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    // 1. 要获取下载文件的路径</span><br><span class="line">    String realPath = &quot;C:\UserStockpile\Blogger\wj\1.png&quot;;</span><br><span class="line">    System.out.println(&quot;下载文件的路径：&quot;+realPath);</span><br><span class="line">    // 2. 下载的文件名是啥？</span><br><span class="line">    String fileName = realPath.substring(realPath.lastIndexOf(&quot;\\&quot;) + 1);</span><br><span class="line">    // 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span><br><span class="line">    resp.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename=&quot;+URLEncoder.encode(fileName,&quot;UTF-8&quot;));</span><br><span class="line">    // 4. 获取下载文件的输入流</span><br><span class="line">    FileInputStream in = new FileInputStream(realPath);</span><br><span class="line">    // 5. 创建缓冲区</span><br><span class="line">    int len = 0;</span><br><span class="line">    byte[] buffer = new byte[1024];</span><br><span class="line">    // 6. 获取OutputStream对象</span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    // 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span><br><span class="line">    while ((len=in.read(buffer))&gt;0)&#123;</span><br><span class="line">        out.write(buffer,0,len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现重定向"><a href="#实现重定向" class="headerlink" title="实现重定向"></a>实现重定向</h4><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012496.png" alt="img"></p><p>Web 资源 B 收到客户端 A 请求后，通知 A 访问另一个 Web 资源 C ，这个过程叫做重定向</p><p>常见场景：</p><ul><li>用户登录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void sendRedirect(String var1) throws IOException;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);</span><br><span class="line">        resp.setStatus(302);</span><br><span class="line">         */</span><br><span class="line">    resp.sendRedirect(&quot;/r/img&quot;);//重定向</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重定向和转发的区别</p><p>相同点：</p><ul><li>页面都会实现跳转</li></ul><p>不同点:</p><ul><li>请求转发的时候,URL不会发生变化.</li><li>重定向的时候,URL地址栏会发生变化.</li></ul><p>转发</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012495.png" alt="img"></p><p>重定向</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152012496.png" alt="img"></p><h4 id="简单实现登录重定向"><a href="#简单实现登录重定向" class="headerlink" title="简单实现登录重定向"></a>简单实现登录重定向</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/login&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    //处理请求</span><br><span class="line">    String username = req.getParameter(&quot;username&quot;);</span><br><span class="line">    String password = req.getParameter(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">    System.out.println(username+&quot;:&quot;+password);</span><br><span class="line"></span><br><span class="line">    //重定向时候一定要注意，路径问题，否则404；</span><br><span class="line">    resp.sendRedirect(&quot;/r/success.jsp&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;requset&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;com.linglan.servlet.RequestTest&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;requset&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/login&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;requset&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;com.linglan.servlet.RequestTest&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;requset&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/login&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="HttpServletRequest-获取参数，请求转发"><a href="#HttpServletRequest-获取参数，请求转发" class="headerlink" title="HttpServletRequest 获取参数，请求转发"></a>HttpServletRequest 获取参数，请求转发</h3><p>HttpServletRequest 代表客户端的请求，用户通过 HTTP 协议访问服务器，HTTP 请求中的所有信息会被封装到 HttpServletRequest ，通过这个HttpServletRequest 的方法，获得客户端的所有信息；</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152048078.png" alt="76cb3b2e8b35e4db8153c7a49b8dfe2"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152048688.png" alt="0c14810acd43a44dcb5da5eb76df9dd"></p><p>获取参数、请求转发</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152050815.png" alt="a832044777ccee1a1171d0150838fcd"></p><p>index.jsp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">&lt;div style=&quot;text-align: center&quot;&gt;</span><br><span class="line">    &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt;&lt;br/&gt;</span><br><span class="line">        爱好：</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;看电影&quot;/&gt;看电影</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;阅读&quot;/&gt;阅读</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;打电动&quot;/&gt;打电动</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;摄影&quot;/&gt;摄影</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>success.jsp<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;success&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录成功&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.linglan.req.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class LoginServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    req.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">    resp.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">    String username = req.getParameter(&quot;username&quot;);</span><br><span class="line">    String password = req.getParameter(&quot;password&quot;);</span><br><span class="line">    String[] hobbys = req.getParameterValues(&quot;hobbys&quot;);</span><br><span class="line">    System.out.println(&quot;=============================&quot;);</span><br><span class="line">    //后台接收中文乱码问题</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(Arrays.toString(hobbys));</span><br><span class="line">    System.out.println(&quot;=============================&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(req.getContextPath());</span><br><span class="line">    //通过请求转发</span><br><span class="line">    //这里的 / 代表当前的web应用</span><br><span class="line">    req.getRequestDispatcher(&quot;/success.jsp&quot;).forward(req,resp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152050202.png" alt="image-20210910135932925"></p><h2 id="Cookie、Session"><a href="#Cookie、Session" class="headerlink" title="Cookie、Session"></a>Cookie、Session</h2><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个 Web 资源，关闭浏览器，这个过程可以称之为会话；</p><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端 服务端<br>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</p><p>客户端 ： 服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie<br>服务端：服务器登记你来过了，下次你来的时候我来匹配你； seesion</p><h3 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h3><p><strong>cookie</strong></p><ul><li>客户端技术（响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息？可将信息或数据放在 session 中</li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152051704.png" alt="5575f9e3fc32429d9bc71ca80ff66fe"></p><ol><li>从请求中拿到 cookie 信息</li><li>服务器响应给客户端 cookie</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); //获得Cookie</span><br><span class="line">cookie.getName(); //获得cookie中的key</span><br><span class="line">cookie.getValue(); //获得cookie中的vlaue</span><br><span class="line">new Cookie(&quot;lastLoginTime&quot;, System.currentTimeMillis()+&quot;&quot;); //新建一个cookie</span><br><span class="line">cookie.setMaxAge(24*60*60); //设置cookie的有效期</span><br><span class="line">resp.addCookie(cookie); //响应给客户端一个cookie</span><br></pre></td></tr></table></figure><p><strong>cookie ： 一般会保存在本地的用户目录下 appdata ；</strong></p><ul><li>一个 Web 站点可以给浏览器发送多个 Cookie，最多存放 20 个 cookie；</li><li>cookie 大小有限制 4kb；</li><li>300 个 cookie 浏览器上限</li></ul><p><strong>删除 Cookie；</strong></p><ul><li>不设置有效期，关闭浏览器，自动失效；</li><li>设置有效期为 0；</li></ul><p><strong>编码解码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URLEncoder.encode(&quot;铃兰&quot;,&quot;utf-8&quot;)</span><br><span class="line">URLDecoder.decode(cookie.getValue(),&quot;UTF-8&quot;)</span><br></pre></td></tr></table></figure><h3 id="Session（重点）"><a href="#Session（重点）" class="headerlink" title="Session（重点）"></a>Session（重点）</h3><p>什么是session？</p><ul><li>服务器会给每一个用户（浏览器）创建一个 Session 对象；</li><li>一个 Session 独占一个浏览器，只要浏览器没有关闭，这个 Session 就存在；</li><li>用户登录之后，整个网站它都可以访问！-&gt; 保存用户的信息；保存购物车的信息…</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152051666.png" alt="image-20210914175131558"></p><p>Session 和 cookie 的区别：</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中，服务器端保存 （保存重要的信息，减少服务器资源的浪费）</li><li>Session 对象由服务创建；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152053465.png" alt="image-20210916151638102"></p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152053692.png" alt="image-20210916151719750"></p><p>使用场景：</p><ul><li>保存一个登录用户的信息；</li><li>购物车信息；</li><li>在整个网站中经常会使用的数据，我们将它保存在 Session 中；</li></ul><p>使用 Session：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.linglan.servlet;</span><br><span class="line"></span><br><span class="line">import com.linglan.pojo.Person;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class SessionDemo01 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        //解决乱码问题</span><br><span class="line">        req.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        resp.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line">        </span><br><span class="line">        //得到Session</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        //给Session中存东西</span><br><span class="line">        session.setAttribute(&quot;name&quot;,new Person(&quot;铃兰&quot;,1));</span><br><span class="line">        //获取Session的ID</span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        //判断Session是不是新创建</span><br><span class="line">        if (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(&quot;session创建成功,ID:&quot;+sessionId);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            resp.getWriter().write(&quot;session以及在服务器中存在了,ID:&quot;+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //Session创建的时候做了什么事情；</span><br><span class="line">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span><br><span class="line">//        resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//得到Session</span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">Person person = (Person) session.getAttribute(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">session.removeAttribute(&quot;name&quot;);</span><br><span class="line">//手动注销Session</span><br><span class="line">session.invalidate();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>会话自动过期：web.xml 配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--设置Session默认的失效时间--&gt;</span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">    &lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span><br><span class="line">    &lt;session-timeout&gt;15&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="什么-JSP"><a href="#什么-JSP" class="headerlink" title="什么 JSP"></a>什么 JSP</h3><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p><p>最大的特别：</p><ul><li>写jsp就像在写html</li><li>区别：<ul><li>html只给用户提供静态数据</li><li>jsp页面中可以嵌入java代码，为用户提供动态数据</li></ul></li></ul><h3 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP原理</h3><p>思路：jsp到底怎么执行的？</p><ul><li>代码层面看不出啥（jsp）</li><li>服务器内部工作</li></ul><p>tomcat中有一个work目录</p><p>idea使用tomcat的会在idea的tomcat中生产一个work目录</p><p>发现页面转变了java程序！</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152056363.png" alt="08f56002fc766d212f4b82f6ed99610"></p><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问servlet</strong></p><p>JSP 最终也会被转换成一个 Java 类</p><p>JSP 本质上就是一个 Servlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase</span><br><span class="line">    implements org.apache.jasper.runtime.JspSourceDependent,</span><br><span class="line">                 org.apache.jasper.runtime.JspSourceImports &#123;</span><br><span class="line">                     </span><br><span class="line">                 &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract class HttpJspBase extends HttpServlet implements HttpJspPage &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152058366.png" alt="image-20220715205804292"></p><p>源码分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase</span><br><span class="line">    implements org.apache.jasper.runtime.JspSourceDependent,</span><br><span class="line">                 org.apache.jasper.runtime.JspSourceImports &#123;</span><br><span class="line">  //初始化      </span><br><span class="line">  public void _jspInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  //销毁</span><br><span class="line">  public void _jspDestroy() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  //jsp service</span><br><span class="line">  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)</span><br><span class="line">      throws java.io.IOException, javax.servlet.ServletException &#123;</span><br><span class="line">      //1.请求方式判断  </span><br><span class="line">      //...</span><br><span class="line">      //2.内置一些对象</span><br><span class="line">    final javax.servlet.jsp.PageContext pageContext;//页面上下本</span><br><span class="line">    javax.servlet.http.HttpSession session = null;//session</span><br><span class="line">    final javax.servlet.ServletContext application;//applicationContext</span><br><span class="line">    final javax.servlet.ServletConfig config;//config</span><br><span class="line">    javax.servlet.jsp.JspWriter out = null;//out</span><br><span class="line">    final java.lang.Object page = this;//page:当前</span><br><span class="line">      //...</span><br><span class="line">      //3.输出页面前增加的代码</span><br><span class="line">      response.setContentType(&quot;text/html&quot;);//设置响应页面类型</span><br><span class="line">      pageContext = _jspxFactory.getPageContext(this, request, response,</span><br><span class="line">      null, true, 8192, true);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      session = pageContext.getSession();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br><span class="line">      //4.以上的这些个对象我们可以在jsp中直接使用。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152058976.png" alt="7e9b00dbe4def2a327bc7a696b70855"></p><p>在jsp页面中</p><p>只要是java代码就会原封不动的输出</p><p>如果是html代码，就会被转换为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.write(&quot;    &lt;title&gt;Title&lt;/title&gt;\r\n&quot;);</span><br></pre></td></tr></table></figure><p>这样的格式，输出到前端！</p><h3 id="JSP-基础语法和指令"><a href="#JSP-基础语法和指令" class="headerlink" title="JSP 基础语法和指令"></a>JSP 基础语法和指令</h3><p>任何语言都有自己的语法，java有，jsp作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可），java所有语法都支持。</p><p>新建一个项目</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152059846.png" alt="image-20220715205924772"></p><p>导包pom.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.linglan&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javaweb-jsp&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--        servlet依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--        jsp依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.3.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--        jstl依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--      standard标签库  --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP-表达式"><a href="#JSP-表达式" class="headerlink" title="JSP 表达式"></a>JSP 表达式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br><span class="line">&lt;%= 变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= new java.util.Date()%&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP-脚本片段"><a href="#JSP-脚本片段" class="headerlink" title="JSP 脚本片段"></a>JSP 脚本片段</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--jsp脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  int sum = 0;</span><br><span class="line">  for (int i = 1; i &lt;=100 ; i++) &#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  out.println(&quot;&lt;h1&gt;Sum=&quot;+sum+&quot;&lt;/h1&gt;&quot;);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="脚本片段的在实现"><a href="#脚本片段的在实现" class="headerlink" title="脚本片段的在实现"></a>脚本片段的在实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  int i = 5;</span><br><span class="line">  out.print(&quot;i=&quot; + i);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  i += 5;</span><br><span class="line">  out.print(&quot;i=&quot; + i);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--在代码中嵌入html元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  for (int j = 0; j &lt; 5; j++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h2&gt;hello&lt;%=j%&gt;&lt;/h2&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP-声明"><a href="#JSP-声明" class="headerlink" title="JSP 声明"></a>JSP 声明</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  static &#123;</span><br><span class="line">    System.out.println(&quot;Loading Servlet!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private int globalVar = 0;</span><br><span class="line"></span><br><span class="line">  public void kuang()&#123;</span><br><span class="line">    System.out.println(&quot;进入了方法Kuang！&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>jsp声明，会被编译到jsp生成java代码的类中！其他的，就会被生成到_jspService方法中！</p><p>在jsp，嵌入java代码即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure><p>发现：jsp的注释，不会在客户端显示，html会！</p><h4 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page args.... %&gt;</span><br><span class="line">&lt;%@include file=&quot;&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--@include会将两个页面合二为一--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@include file=&quot;common/header.jsp&quot;%&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@include file=&quot;common/footer.jsp&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--jSP标签</span><br><span class="line">    jsp:include：拼接页面，本质还是三个</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;jsp:include page=&quot;/common/header.jsp&quot;/&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=&quot;/common/footer.jsp&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h4><ul><li>PageContext 存东西</li><li>Request 存东西</li><li>Response</li><li>Session 存东西</li><li>Application 【ServletContext】 存东西</li><li>config 【ServletConfig】</li><li>out</li><li>page</li><li>exception</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pageContext.setAttribute(&quot;name1&quot;,&quot;铃兰1号&quot;); //保存的数据只在一个页面中有效</span><br><span class="line">request.setAttribute(&quot;name2&quot;,&quot;铃兰2号&quot;); //保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br><span class="line">session.setAttribute(&quot;name3&quot;,&quot;铃兰3号&quot;); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br><span class="line">application.setAttribute(&quot;name4&quot;,&quot;铃兰4号&quot;);  //保存的数据只在服务器中有效，从打开服务器到关闭服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p><h4 id="JSP标签、JSTL标签、EL表达式"><a href="#JSP标签、JSTL标签、EL表达式" class="headerlink" title="JSP标签、JSTL标签、EL表达式"></a>JSP标签、JSTL标签、EL表达式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- JSTL表达式的依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- standard标签库 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>EL 表达式： ${}</p><ul><li>获取数据</li><li>执行运算</li><li>获取 Web 开发的常用对象</li></ul><p>JSP 标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--jsp:include--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">http://localhost:8080/jsptag.jsp?name=linglan&amp;age=12</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=&quot;/jsptag2.jsp&quot;&gt;</span><br><span class="line">    &lt;jsp:param name=&quot;name&quot; value=&quot;linglan&quot;&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;jsp:param name=&quot;age&quot; value=&quot;12&quot;&gt;&lt;/jsp:param&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><p><strong>JSTL表达式</strong></p><p>JSTL 标签库的使用就是为了弥补 HTML 标签的不足；它自定义许多标签，可以供我们使用，标签的功能和 Java 代码一样！</p><p><strong>格式化标签</strong></p><p><strong>SQL标签</strong></p><p><strong>XML 标签</strong></p><p><strong>核心标签</strong> （掌握部分）</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152100512.png" alt="b7a0bcf5224ba2b1e65967eb4ae6857"></p><p><strong>JSTL标签库使用步骤</strong></p><ul><li>引入对应的 taglib</li><li>使用其中的方法</li><li><strong>在 Tomcat 也需要引入 JSTL 的包，否则会报错：JSTL 解析错误</strong></li></ul><p>c: if</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h4&gt;if测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;coreif.jsp&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;$&#123;param.username&#125;&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot; var=&quot;isAdmin&quot;&gt;</span><br><span class="line">    &lt;c:out value=&quot;管理员欢迎您！&quot;/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=&quot;$&#123;isAdmin&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>c:choose c:when</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--定义一个变量score，值为85--%&gt;</span><br><span class="line">&lt;c:set var=&quot;score&quot; value=&quot;55&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;score&gt;=90&#125;&quot;&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;score&gt;=80&#125;&quot;&gt;</span><br><span class="line">        你的成绩为一般</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;score&gt;=70&#125;&quot;&gt;</span><br><span class="line">        你的成绩为良好</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;score&lt;=60&#125;&quot;&gt;</span><br><span class="line">        你的成绩为不及格</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>c:forEach</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; people = new ArrayList&lt;&gt;();</span><br><span class="line">    people.add(0,&quot;张三&quot;);</span><br><span class="line">    people.add(1,&quot;李四&quot;);</span><br><span class="line">    people.add(2,&quot;王五&quot;);</span><br><span class="line">    people.add(3,&quot;赵六&quot;);</span><br><span class="line">    people.add(4,&quot;老六&quot;);</span><br><span class="line">    request.setAttribute(&quot;list&quot;,people);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">var , 每一次遍历出来的变量</span><br><span class="line">items, 要遍历的对象</span><br><span class="line">begin,   哪里开始</span><br><span class="line">end,     到哪里</span><br><span class="line">step,   步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach var=&quot;people&quot; items=&quot;$&#123;list&#125;&quot;&gt;</span><br><span class="line">    &lt;c:out value=&quot;$&#123;people&#125;&quot;/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach var=&quot;people&quot; items=&quot;$&#123;list&#125;&quot; begin=&quot;1&quot; end=&quot;3&quot; step=&quot;1&quot; &gt;</span><br><span class="line">    &lt;c:out value=&quot;$&#123;people&#125;&quot;/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>实体类<br>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射 ORM；</p><p>ORM ：对象关系映射</p><ul><li>表—&gt;类</li><li>字段–&gt;属性</li><li>行记录——&gt;对象</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">age</th><th style="text-align:center">address</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">张三</td><td style="text-align:center">20</td><td style="text-align:center">北京</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">李四</td><td style="text-align:center">19</td><td style="text-align:center">上海</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">王五</td><td style="text-align:center">18</td><td style="text-align:center">深圳</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String address;</span><br><span class="line">    //...省了构造方法和get set 方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>javabean.jsp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;com.linglan.pojo.Student&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">//    Student student = new Student();</span><br><span class="line">//    student.setAddress(&quot;深圳&quot;);</span><br><span class="line">//    student.setAge(18);</span><br><span class="line">//    student.setId(1);</span><br><span class="line">//    student.setName(&quot;linglan&quot;);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:useBean id=&quot;student&quot; class=&quot;com.linglan.pojo.Student&quot; scope=&quot;page&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:setProperty name=&quot;student&quot; property=&quot;address&quot; value=&quot;深圳&quot;/&gt;</span><br><span class="line">&lt;jsp:setProperty name=&quot;student&quot; property=&quot;age&quot; value=&quot;18&quot;/&gt;</span><br><span class="line">&lt;jsp:setProperty name=&quot;student&quot; property=&quot;id&quot; value=&quot;1&quot;/&gt;</span><br><span class="line">&lt;jsp:setProperty name=&quot;student&quot; property=&quot;name&quot; value=&quot;linglan&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--  &lt;%=student.getAddress()%&gt;   --%&gt;</span><br><span class="line">地址：&lt;jsp:getProperty name=&quot;student&quot; property=&quot;address&quot;/&gt;</span><br><span class="line">年龄：&lt;jsp:getProperty name=&quot;student&quot; property=&quot;age&quot;/&gt;</span><br><span class="line">id：&lt;jsp:getProperty name=&quot;student&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">姓名：&lt;jsp:getProperty name=&quot;student&quot; property=&quot;name&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="mvc三层架构"><a href="#mvc三层架构" class="headerlink" title="mvc三层架构"></a>mvc三层架构</h2><p>什么是MVC：Model View Controller 模型视图控制器</p><h3 id="早些年"><a href="#早些年" class="headerlink" title="早些年"></a>早些年</h3><p>用户直接访问控制层，控制层就可以直接操作数据库</p><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152101929.png" alt="dc726f8c38e25fc1d2ea00b5779772d"></p><p>用户直接访问控制层，控制层就可以直接操作数据库；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">servlet--CRUD--&gt;数据库</span><br><span class="line">弊端：程序十分臃肿，不利于维护  </span><br><span class="line">servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码</span><br><span class="line"></span><br><span class="line">架构：没有什么是加一层解决不了的！</span><br><span class="line">程序猿调用</span><br><span class="line">|</span><br><span class="line">JDBC</span><br><span class="line">|</span><br><span class="line">Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure><h3 id="MVC-三层架构"><a href="#MVC-三层架构" class="headerlink" title="MVC 三层架构"></a>MVC 三层架构</h3><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152101133.png" alt="e161256bd86c26afecbfed9838b9710"></p><p>Model</p><ul><li>业务处理：业务逻辑（Service）</li><li>数据持久层：CRUD</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起 Servlet 请求（a,form,img…）</li></ul><p>Controller （Servlet）</p><ul><li><p>接收用户的请求：（req：请求参数、Session 信息…）</p></li><li><p>交给业务层处理对应的代码</p></li><li><p>控制试图的跳转</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure><h2 id="Filter（重点）"><a href="#Filter（重点）" class="headerlink" title="Filter（重点）"></a>Filter（重点）</h2><p>Filter：过滤器，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152101499.png" alt="c4a1f49d1f6da1acd418aee04995db7"></p><p>Filter 开发步骤：</p><ol><li><p>导包</p></li><li><p>编写过滤器</p><ul><li>导包不要错</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuloin/lanling_img@main/img/javaweb/202207152101954.png" alt="2b49b12934169f978979f6933377d39"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class CharacterEncodingFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line">    //初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        System.out.println(&quot;CharacterEncodingFilter初始化&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //Chain : 链</span><br><span class="line">    /*</span><br><span class="line">    1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="line">    2. 必须要让过滤器继续同行</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">     */</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;CharacterEncodingFilter执行前....&quot;);</span><br><span class="line">        chain.doFilter(request,response); //让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span><br><span class="line">        System.out.println(&quot;CharacterEncodingFilter执行后....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //销毁：web服务器关闭的时候，过滤会销毁</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        System.out.println(&quot;CharacterEncodingFilter销毁&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 web.xml 中配置Filter</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;com.kuang.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span><br><span class="line">    &lt;url-pattern&gt;/servlet/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>实现一个监听器的接口(有N种)</p><p>实现一个监听器；</p><ol><li>编写一个监听器<br>实现监听器的接口…</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//统计网站在线人数 ： 统计session</span><br><span class="line">public class OnlineCountListener implements HttpSessionListener &#123;</span><br><span class="line"></span><br><span class="line">    //创建session监听： 看你的一举一动</span><br><span class="line">    //一旦创建Session就会触发一次这个事件！</span><br><span class="line">    public void sessionCreated(HttpSessionEvent se) &#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(se.getSession().getId());</span><br><span class="line"></span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);</span><br><span class="line"></span><br><span class="line">        if (onlineCount==null)&#123;</span><br><span class="line">            onlineCount = new Integer(1);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            int count = onlineCount.intValue();</span><br><span class="line">            onlineCount = new Integer(count+1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //销毁session监听</span><br><span class="line">    //一旦销毁Session就会触发一次这个事件！</span><br><span class="line">    public void sessionDestroyed(HttpSessionEvent se) &#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);</span><br><span class="line"></span><br><span class="line">        if (onlineCount==null)&#123;</span><br><span class="line">            onlineCount = new Integer(0);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            int count = onlineCount.intValue();</span><br><span class="line">            onlineCount = new Integer(count-1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    Session销毁：</span><br><span class="line">    1. 手动销毁  getSession().invalidate();</span><br><span class="line">    2. 自动销毁</span><br><span class="line">     */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 web.xml 中注册监听器</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注册监听器--&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;com.linglan.listener.OnlineCountListener&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure><ol><li>看情况是否使用！</li></ol><h2 id="监听器GUI中理解"><a href="#监听器GUI中理解" class="headerlink" title="监听器GUI中理解"></a>监听器GUI中理解</h2><h3 id="过滤器，监听器常见应用"><a href="#过滤器，监听器常见应用" class="headerlink" title="过滤器，监听器常见应用"></a>过滤器，监听器常见应用</h3><p><strong>监听器：GUI编程中经常使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.event.WindowAdapter;</span><br><span class="line">import java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line">public class TestPanel &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Frame frame = new Frame(&quot;测试&quot;);</span><br><span class="line">        Panel panel = new Panel();</span><br><span class="line"></span><br><span class="line">        frame.setLayout(null);</span><br><span class="line">        frame.setBounds(300, 300, 500, 500);</span><br><span class="line">        frame.setBackground(new Color(0, 0, 255));</span><br><span class="line"></span><br><span class="line">        panel.setBounds(50, 50, 300, 300);</span><br><span class="line">        panel.setBackground(new Color(255, 0, 0));</span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line">        frame.setVisible(true);</span><br><span class="line"></span><br><span class="line">        //添加一个窗口关闭的监听事件</span><br><span class="line">        frame.addWindowListener(new WindowAdapter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void windowClosing(WindowEvent e) &#123;</span><br><span class="line">                System.exit(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p><ol><li>用户登录后，想session中放入用户信息</li><li>进入主页的时候要判断用户是否已经登录（要求：在过滤器中实现）</li></ol><h2 id="Filter实现权限拦截"><a href="#Filter实现权限拦截" class="headerlink" title="Filter实现权限拦截"></a>Filter实现权限拦截</h2><p>登录页面login.jsp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;/servlet/login&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>错误页面error.jsp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;失败&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;没有权限，用户输入有误&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;a href=&quot;login.jsp&quot;&gt;返回登录页面&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>登录接口LoginServlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import com.linglan.utils.Constant;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class LoginServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        String userName = req.getParameter(&quot;username&quot;);</span><br><span class="line">        if (&quot;admin&quot;.equals(userName)) &#123;</span><br><span class="line">            //登录成功</span><br><span class="line">            req.getSession().setAttribute(Constant.USER_SESSION, req.getSession().getId());</span><br><span class="line">            //跳转</span><br><span class="line">            resp.sendRedirect(&quot;/sys/success.jsp&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //登录失败</span><br><span class="line">            resp.sendRedirect(&quot;/error.jsp&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注销页面LogoutServlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class LogoutServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        Object userSession = req.getSession().getAttribute(Constant.USER_SESSION);</span><br><span class="line">        if (userSession != null) &#123;</span><br><span class="line">            req.getSession().removeAttribute(Constant.USER_SESSION);</span><br><span class="line">            //跳转到登录页面</span><br><span class="line">            resp.sendRedirect(&quot;/login.jsp&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //跳转到登录页面</span><br><span class="line">            resp.sendRedirect(&quot;/login.jsp&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量类Constant</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Constant &#123;</span><br><span class="line"></span><br><span class="line">    public static final String USER_SESSION = &quot;USER_SESSION&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器LoginFilter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import com.linglan.utils.Constant;</span><br><span class="line"></span><br><span class="line">import javax.servlet.Filter;</span><br><span class="line">import javax.servlet.FilterChain;</span><br><span class="line">import javax.servlet.FilterConfig;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class LoginFilter implements Filter &#123;</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse rep = (HttpServletResponse) response;</span><br><span class="line">        Object userSession = req.getSession().getAttribute(Constant.USER_SESSION);</span><br><span class="line">        if (userSession == null) &#123;</span><br><span class="line">            //跳转错误页面</span><br><span class="line">            rep.sendRedirect(&quot;/error.jsp&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口配置web.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee</span><br><span class="line">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span><br><span class="line">         version=&quot;3.1&quot;</span><br><span class="line">         metadata-complete=&quot;true&quot;&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.linglan.servlets.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/hello&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;login&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/login&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;login&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.linglan.servlets.LoginServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;logout&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/logout&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;logout&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.linglan.servlets.LogoutServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;com.linglan.filters.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;loginFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;com.linglan.filters.LoginFilter&lt;/filter-class&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;loginFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/sys/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--    注册监听器--&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;com.linglan.listeners.OnLineCountListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br><span class="line"></span><br><span class="line">    &lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;10&lt;/session-timeout&gt;</span><br><span class="line">    &lt;/session-config&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/posts/62688.html"/>
      <url>/posts/62688.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="初始Mysql数据库"><a href="#初始Mysql数据库" class="headerlink" title="初始Mysql数据库"></a>初始Mysql数据库</h2><h3 id="为什么学数据库"><a href="#为什么学数据库" class="headerlink" title="为什么学数据库"></a>为什么学数据库</h3><p>1、岗位需求</p><p>2、现在的世界，大数据时代，得数据者得天下</p><p>3、被迫需求：存数据</p><p>4、数据库是所有软件体系中最核心的存在 DBA</p><h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>数据库：(DB,DataBase)</p><p>概念:数据仓库，软件，安装在操作系统之（windows,Linux。mac）上的！SQL,可以存储大量的数据，500万!</p><p>作用:存储数据，管理数据 Excel</p><h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h3><p>关系型数据库：(SQL)</p><ul><li>MySQL, Oracle, sql Server, DB2, SQLite</li><li>通过表和表之间，行和列之间的关系进行数据的存储</li></ul><p>非关系型数据库：(NoSQL) Not Only SQL</p><ul><li>Redis, MongDB</li><li>非关系型数据库，对象存储，通过对象自身的属性来决定。</li></ul><p><strong>DBMS(数据库管理系统) </strong></p><ul><li>数据库的管理软件，科学有效的管理我们的数据，维护和获取</li><li>MySQL ，数据管理系统！</li></ul><h3 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h3><p>MySQL是一个<strong>关系型数据库管理系统</strong></p><p>前世： 瑞典MySQL AB 公司</p><p>今身： 属于 Oracle 旗下产品</p><p>MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p>开源的数据库软件</p><p>体积小，速度快，总体拥有成本低，招人成本比较低。</p><p>中小型网站，或者大型网站，集群</p><p>官网： <a href="https://www.mysql.com/">https://www.mysql.com/</a></p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>命令行连接！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p123456 --连接数据库</span><br><span class="line"></span><br><span class="line">update mysql.user set authentication_string=password(<span class="string">&#x27;123456&#x27;</span>) where user=<span class="string">&#x27;root&#x27;</span> and Host=<span class="string">&#x27;localhost&#x27;</span>;  --修改密码</span><br><span class="line"></span><br><span class="line">flush privileges;--刷新权限</span><br><span class="line">--------------------------------------------------</span><br><span class="line">--所有语句使用;结尾--</span><br><span class="line"></span><br><span class="line">show databases;--查看所有的数据库</span><br><span class="line"></span><br><span class="line">mysql&gt; use school--切换数据库， use 数据库名</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">show tables;--查看数据库中所有的表</span><br><span class="line">describe student;--显示数据库中所有的表的信息</span><br><span class="line">create database westos;--创建一个数据库</span><br><span class="line"></span><br><span class="line">exit;--退出连接</span><br><span class="line"></span><br><span class="line">--单行注释（sql本来注释）</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><p>操作数据库》操作数据库中的表》操作数据库中表的数据</p><p>MySQL不区分大小写</p><h3 id="操作数据库-1"><a href="#操作数据库-1" class="headerlink" title="操作数据库"></a>操作数据库</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS westos;</span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS westos</span><br></pre></td></tr></table></figure><h4 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- ``,如果你的表名或者字段名是一个特殊字符，需要带``</span><br><span class="line">USE &#x27;school&#x27;</span><br></pre></td></tr></table></figure><h4 id="产看数据库"><a href="#产看数据库" class="headerlink" title="产看数据库"></a>产看数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES--查看所有数据库</span><br></pre></td></tr></table></figure><h3 id="数据库的列类型"><a href="#数据库的列类型" class="headerlink" title="数据库的列类型"></a>数据库的列类型</h3><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><ul><li><p>tinyint 十分小的数据 1个字节</p></li><li><p>smallint 较小的数据 2个字节</p></li><li>mediumint 中等大小 3个字节</li><li>int 标准的整数 4个字节（常用）</li><li>bigint 较大的数据 8个字节</li><li>float 浮点数 4个字节</li><li>double 浮点数 8个字节 （精度问题）</li><li>decimal 字符串形式的浮点数,金融计算的时候，一般用</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>char 字符串固定大小 0-255</li><li>varchar 可变字符串 0-65535（常用）</li><li>tinytext 微型文本 2^8-1</li><li>text 文本串 2^16-1 (保存大文本)</li></ul><h4 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h4><p>java.util.Date</p><ul><li>date YYYY-MM-DD，日期</li><li>time HH:mm:ss 时间格式</li><li>datetime YYYY-MM-DD HH:mm:ss 最常用的时间格式</li><li>timestamp 时间戳 1970.1.1到现在的毫秒数</li><li>year 年份表示</li></ul><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><ul><li>没有值，未知</li><li>注意，不要使用null进行运算，结果为null</li></ul><h3 id="数据库的字段类型（重点）"><a href="#数据库的字段类型（重点）" class="headerlink" title="数据库的字段类型（重点）"></a>数据库的字段类型（重点）</h3><h4 id="unsigened"><a href="#unsigened" class="headerlink" title="unsigened:"></a>unsigened:</h4><ul><li><p>无符号的整数</p></li><li><p>声明该列不能声明负数</p></li></ul><h4 id="zerofill"><a href="#zerofill" class="headerlink" title="zerofill:"></a>zerofill:</h4><ul><li>0填充的</li><li>10的长度 1 – 0000000001 不足位数用0 填充</li></ul><h4 id="自增："><a href="#自增：" class="headerlink" title="自增："></a>自增：</h4><ul><li>通常理解为自增，自动在上一条记录的基础上+1</li><li>通常用来设计唯一的主键 index,必须是整数类似</li><li>可以自定义设置主键自增的起始值和步长</li></ul><h4 id="非空-NULL-not-Null"><a href="#非空-NULL-not-Null" class="headerlink" title="非空 NULL not Null"></a>非空 NULL not Null</h4><ul><li><p>假设设置为 not null，如何不给他赋值，就会报错</p></li><li><p>NULL 如果不填写，默认为NULL</p></li></ul><h4 id="默认："><a href="#默认：" class="headerlink" title="默认："></a>默认：</h4><ul><li>设置默认的值！</li></ul><h3 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">--目标:创建一个schoo1数据库</span><br><span class="line"></span><br><span class="line">--创建学生表(列,字段)使用SQL 创建</span><br><span class="line"></span><br><span class="line">--学号int 登录密码varchar(20)姓名,性别varchar(2),出生日期(datatime)，家庭住址，emai1--注意点，使用英文()，表的名称和字段尽量使用括起来</span><br><span class="line"></span><br><span class="line">-- AUTO_ INCREMENT 自增</span><br><span class="line"></span><br><span class="line">--字符串使用单引号括起来!</span><br><span class="line"></span><br><span class="line">--所有的语句后面加，(英文的)，最后一个不用加</span><br><span class="line"></span><br><span class="line">-- PRIMARY KEY 主键，一般- 一个表只有一个唯一 -的主键!</span><br><span class="line">CREATE DATABASE school</span><br><span class="line">CREATE TABLE IF NOT EXISTS `student` (</span><br><span class="line">`id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">`name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">`pwd` VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">`sex` VARCHAR(2) NOT NULL DEFAULT &#x27;男&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">`birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">`address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">`email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] `表名`（</span><br><span class="line">`字段名` 列类型[属性][索引][注释],</span><br><span class="line">`字段名` 列类型[属性][索引][注释],</span><br><span class="line">...</span><br><span class="line">`字段名` 列类型[属性][索引][注释]</span><br><span class="line">）[表类型][表的字符集设置][注释]</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE DATABASE school -- 查看创建数据库的语句</span><br><span class="line">SHOW CREATE TABLE student -- 查看student数据表的定义语句</span><br><span class="line">DESC student -- 显示表的结构</span><br></pre></td></tr></table></figure><h3 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 关于数据库引擎</span><br><span class="line">/*</span><br><span class="line">INNODB 默认使用</span><br><span class="line">MYISAM 早些年使用</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>​    </p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">MYISAM</th><th style="text-align:center">INNODB</th></tr></thead><tbody><tr><td style="text-align:center">事务支持</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">数据行锁定</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">外键约束</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">全文索引</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">表空间的大小</td><td style="text-align:center">较小</td><td style="text-align:center">较大，约为MYISAM的两倍</td></tr></tbody></table></div><p>常规使用操作：</p><ul><li>MYISAM 节约空间，速度较快，</li><li>INNODB 安全性高，事务处理，多表多用户操作</li></ul><h4 id="在物理空间存在的位置"><a href="#在物理空间存在的位置" class="headerlink" title="在物理空间存在的位置"></a>在物理空间存在的位置</h4><p>所有的数据库文件都存在data目录下，一个文件夹就对应一个数据库</p><p>本质还是文件的存储</p><p>MySQL 引擎在物理文件上的区别</p><ul><li>innoDB 在数据库表中，只有一个*.frm文件，以及上级目录下的ibdata1文件</li><li>MYISAM 对应的文件<ul><li>*.frm - 表结构的定义文件</li><li>*. MYD -数据文件</li><li>*.MYI 索引文件</li></ul></li></ul><h4 id="设置数据库字符集编码"><a href="#设置数据库字符集编码" class="headerlink" title="设置数据库字符集编码"></a>设置数据库字符集编码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHARTSET=UTF8</span><br></pre></td></tr></table></figure><p>不设置的话，会是mysql默认的字符集编码-（不支持中文）</p><p>可以在my.ini中配置默认的编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character-set-server=utf8</span><br></pre></td></tr></table></figure><h3 id="修改删除表"><a href="#修改删除表" class="headerlink" title="修改删除表"></a>修改删除表</h3><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 修改表名 ALTER TABLE 旧表面 AS 新表名</span><br><span class="line">ALTER TABLE student RENAME  AS student1</span><br><span class="line">-- 增加表的字段 ALTER TABLE 表名 ADD 字段名 列属性</span><br><span class="line">ALTER TABLE student1 ADD age INT(11)</span><br><span class="line">-- 修改表的字段（重命名，修改约束）</span><br><span class="line">ALTER TABLE student1 MODIFY age VARCHAR(11)  -- 修改约束</span><br><span class="line">ALTER TABLE student1 CHANGE age age1 INT(1)  -- 字段重命名</span><br><span class="line"></span><br><span class="line">-- 删除表的字段</span><br><span class="line">ALTER TABLE student1 DROP age1</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除表</span><br><span class="line">DROP TABLE IF EXISTS student1</span><br></pre></td></tr></table></figure><p>所有的创建和删除操作尽量加上判断，以免报错</p><p>注意点：</p><ul><li>`` 字段名，使用这个包裹</li><li>注释 – /**/</li><li>sql 关键字大小写不敏感，建议写小写</li><li>所有的符号全部用英文</li></ul><h2 id="MySQL数据管理"><a href="#MySQL数据管理" class="headerlink" title="MySQL数据管理"></a>MySQL数据管理</h2><h3 id="外键（了解）"><a href="#外键（了解）" class="headerlink" title="外键（了解）"></a>外键（了解）</h3><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><p>在创建表的时候，增加约束（麻烦，比较复杂）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `grade`(</span><br><span class="line">`gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年级id&#x27;,</span><br><span class="line">`gradename` VARCHAR(50) NOT NULL COMMENT &#x27;年级名称&#x27;,</span><br><span class="line">PRIMARY KEY (`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 学生表的 gradeid 字段 要去引用年级表的gradeid</span><br><span class="line">-- 定义外键KEY</span><br><span class="line">-- 给这个外键添加约束（执行引用） references 引用</span><br><span class="line">CREATE TABLE IF NOT EXISTS `student` (</span><br><span class="line">`id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">`name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">`pwd` VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">`sex` VARCHAR(2) NOT NULL DEFAULT &#x27;男&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">`birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">`gradeid` INT(10) NOT NULL COMMENT &#x27;学生年级&#x27;,</span><br><span class="line">`address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">`email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (`id`),</span><br><span class="line">KEY `FK_gardeid` (`gradeid`),</span><br><span class="line">CONSTRAINT `FK_gardeid` FOREIGN KEY (`gradeid`) REFERENCES `grade` (gradeid)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure><p>删除有外键关系的表的时候，必须先删除引用的表（从表），再删除被引用的表（主表）</p><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><p>创建表成功后添加外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `grade`(</span><br><span class="line">`gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年级id&#x27;,</span><br><span class="line">`gradename` VARCHAR(50) NOT NULL COMMENT &#x27;年级名称&#x27;,</span><br><span class="line">PRIMARY KEY (`gradeid`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 学生表的 gradeid 字段 要去引用年级表的gradeid</span><br><span class="line">-- 定义外键KEY</span><br><span class="line">-- 给这个外键添加约束（执行引用） references 引用</span><br><span class="line">CREATE TABLE IF NOT EXISTS `student` (</span><br><span class="line">`id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">`name` VARCHAR(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">`pwd` VARCHAR(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">`sex` VARCHAR(2) NOT NULL DEFAULT &#x27;男&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">`birthday` DATETIME DEFAULT NULL COMMENT &#x27;出生日期&#x27;,</span><br><span class="line">`gradeid` INT(10) NOT NULL COMMENT &#x27;学生年级&#x27;,</span><br><span class="line">`address` VARCHAR(100) DEFAULT NULL COMMENT &#x27;家庭住址&#x27;,</span><br><span class="line">`email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line"></span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 创建表的时候没有外键关系</span><br><span class="line">ALTER TABLE `student`</span><br><span class="line">ADD CONSTRAINT `FK_gradeid` FOREIGN KEY (`gradeid`) REFERENCES `grade`(`gradeid`);</span><br><span class="line"></span><br><span class="line">-- ALTER TABLE`表`  ADD CONSTRAINT 约束名 FOREIGN KEY（作为外键的列） 引用到哪个表的哪个字段</span><br></pre></td></tr></table></figure><p>以上的操作都是物理外键，数据库级别外键，不建议使用。（避免数据库过多造成困扰）</p><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>我们想使用多张表的数据，想使用外键（程序去实现）</li></ul><h3 id="DML语言（全记住）"><a href="#DML语言（全记住）" class="headerlink" title="DML语言（全记住）"></a>DML语言（全记住）</h3><p>数据库意义：数据存储，数据管理</p><p>DML语言：数据操作语言</p><ul><li>Insert</li><li>update</li><li>delete</li></ul><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 插入语句（添加）</span><br><span class="line">-- nsert into 表名（[字段一], [字段二]）values(&#x27;值1&#x27;),(&#x27;值2&#x27;)</span><br><span class="line"></span><br><span class="line">INSERT INTO `grade` (`gradename`) VALUES(&#x27;大四&#x27;)</span><br><span class="line"></span><br><span class="line">-- 由于主键自增我们可以省略（如何不写表的字段，他会一一匹配）</span><br><span class="line">INSERT INTO `grade` VALUES(&#x27;大三&#x27;)</span><br><span class="line">INSERT INTO `grade` (`gradeid`,`gradename`) VALUES (&#x27;大三&#x27;,&#x27;null&#x27;)</span><br><span class="line"></span><br><span class="line">-- 一般写插入语句，我们一定要数据和字段一一对应。</span><br><span class="line">-- 插入多个字段</span><br><span class="line">INSERT INTO `grade`(`gradename`) VALUES (&#x27;大二&#x27;),(&#x27;大一&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO `student`(`name`) VALUES (&#x27;张三&#x27;)</span><br><span class="line"></span><br><span class="line">INSERT INTO `student`(`name`,`pwd`,`sex`) VALUES (&#x27;张三&#x27;,&#x27;aaaaa&#x27;,&#x27;男&#x27;)</span><br><span class="line">INSERT INTO `student`(`name`,`pwd`,`sex`) </span><br><span class="line">VALUES (&#x27;李四&#x27;,&#x27;aaaaa&#x27;,&#x27;男&#x27;),(&#x27;王五&#x27;,&#x27;23232&#x27;,&#x27;女&#x27;)</span><br></pre></td></tr></table></figure><p>语法：— insert into 表名（[字段一], [字段二]）values(‘值1’),(‘值2’)</p><p>注意事项：</p><p>1.字段和字段之间用逗号分开</p><p>2.字段可以省略，但是后面的值必须一一对应</p><p>3.可以同时插入多条数据，VALUES后面的值需要使用，隔开即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `student`(`name`,`pwd`,`sex`) </span><br><span class="line">VALUES (&#x27;李四&#x27;,&#x27;aaaaa&#x27;,&#x27;男&#x27;),(&#x27;王五&#x27;,&#x27;23232&#x27;,&#x27;女&#x27;)</span><br></pre></td></tr></table></figure><h3 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h3><h4 id="update-修改谁（条件）-set-原来的值-新值"><a href="#update-修改谁（条件）-set-原来的值-新值" class="headerlink" title="update 修改谁（条件） set 原来的值=新值"></a>update 修改谁（条件） set 原来的值=新值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 修改学员名字</span><br><span class="line"></span><br><span class="line">UPDATE `student` SET `name`=&#x27;囷&#x27; WHERE id =1;</span><br><span class="line">-- 不指定条件的情况下，会改动所有表</span><br><span class="line">UPDATE `student` SET `name`=&#x27;233&#x27;</span><br><span class="line"></span><br><span class="line">-- 语法；</span><br><span class="line">-- UPDATE 表名 set column_name,[] = value where 条件</span><br></pre></td></tr></table></figure><p>条件：where 子句 运算符 id 等于 某个值，大于某个值，在某个区间内修改</p><p>操作符返回布尔值</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>操作符</strong></th><th style="text-align:center"><strong>含义</strong></th><th style="text-align:center"><strong>范围</strong></th><th style="text-align:center"><strong>结果</strong></th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于</td><td style="text-align:center">5=6</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">!= &lt;&gt;</td><td style="text-align:center">不等于</td><td style="text-align:center">5！=6</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">></td><td style="text-align:center">大于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">>=</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">between and</td><td style="text-align:center">在某个范围内，闭合区间</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">and</td><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">5&gt;1and1&gt;2</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">\</td><td style="text-align:center">\</td><td style="text-align:center"></td><td>5&gt;1or1&gt;2</td><td>true</td></tr></tbody></table></div><p>注意：</p><ul><li><p>column_name 是数据库的列，带上``</p></li><li><p>条件，是筛选的条件，如果没有指定，则会修改所有的列</p></li><li><p>value 是一个具体的值，也可以是一个变量</p></li><li><p>多个设置的属性之间，使用英文逗号隔开</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE `student` SET `birthday`=CURRENT_TIME where `name`=&#x27;李四&#x27; AND SEX = &#x27;男&#x27;</span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><h4 id="delete-命令"><a href="#delete-命令" class="headerlink" title="delete 命令"></a>delete 命令</h4><p>语法 <code>delete from 表名 [where 条件]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 删除数据 (避免这样写)</span><br><span class="line">DELETE FROM `student`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 删除指定</span><br><span class="line">DELETE FROM `student` where id= 1</span><br></pre></td></tr></table></figure><h4 id="TRUNCATE-命令"><a href="#TRUNCATE-命令" class="headerlink" title="TRUNCATE 命令"></a>TRUNCATE 命令</h4><p>作用：完全清空一个数据库，表的结构和索引不会变</p><h4 id="delete-和-TRUNCATE-区别"><a href="#delete-和-TRUNCATE-区别" class="headerlink" title="delete 和 TRUNCATE 区别"></a>delete 和 TRUNCATE 区别</h4><ul><li>相同点： 都能删除数据，都不会删除表结构</li><li>不同：<ul><li>TRUNCATE 重新设置自增列 计数器会归零</li><li>TRUNCATE 不会影响事务</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 测试delete 和 truncate 区别</span><br><span class="line"></span><br><span class="line">CREATE TABLE `test`(</span><br><span class="line">`id` INT(4) NOT NULL AUTO_INCREMENT,</span><br><span class="line">`coll` VARCHAR(20) NOT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO `test`(`coll`) VALUES(&#x27;1&#x27;),(&#x27;2&#x27;),(&#x27;3&#x27;)</span><br><span class="line"></span><br><span class="line">DELETE FROM `test` -- 不会影响自增</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE `test` -- 自增会归零</span><br></pre></td></tr></table></figure><p>了解即可：<code>delete删除的问题</code> 重启数据库，现象</p><ul><li>innoDB 自增列会从1开始（存在内存当中，断电即失）</li><li>MyISAM 继续从上一个自增量开始（存在文件中，不会丢失）</li></ul><h2 id="DQL查询数据（最重点）"><a href="#DQL查询数据（最重点）" class="headerlink" title="DQL查询数据（最重点）"></a>DQL查询数据（最重点）</h2><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><p>(Data Query Language) :数据查询语言</p><ul><li>所有的查询操作都用它 Select</li><li>简单的查询，复杂的查询它都能做</li><li>数据库中最核心的语言</li><li>使用频率最高的语言</li></ul><h3 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 查询  SELECT 字段 FROM 表</span><br><span class="line"></span><br><span class="line">-- 查询指定字段  such as</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM student</span><br><span class="line"></span><br><span class="line">-- 别名，给结果起一个名字 AS   可以给字段起别名 也可以给表起别名</span><br><span class="line">SELECT `StudentNo` AS 学号,`StudentName`AS 学生姓名 FROM student AS S</span><br><span class="line"></span><br><span class="line">-- 函数 Concat(a,b)</span><br><span class="line">SELECT CONCAT(&#x27;姓名：&#x27;,StudentName) AS 新名字 FROM student</span><br></pre></td></tr></table></figure><p>语法： <code>SELECT 字段 ... FROM 表</code></p><p>有时候，列名字不是那么见名知意。我们起别名 AS 字段名 AS 别名 表名 AS 别名</p><p>去重</p><p>作用：去除select语句查询出来的结果中重复的语句，重复的语句只显示一条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询一下有哪些同学参加了考试，成绩</span><br><span class="line">SELECT * FROM result -- 查询全部的考试成绩</span><br><span class="line">-- 查询有哪些同学参加了考试</span><br><span class="line">SELECT `studentNo` FROM result </span><br><span class="line">-- 发现重复数据，去重</span><br><span class="line">SELECT DISTINCT `studentNo` FROM result </span><br></pre></td></tr></table></figure><p>数据库的列（表达式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION()  --查询系统版本（函数）</span><br><span class="line">SELECT 100*3-1 AS 计算结果 -- 用来计算（表达式）</span><br><span class="line">SELECT @@auto_increment_increment --查询自增的步长（变量）</span><br><span class="line"></span><br><span class="line">-- 学员考试成绩+1 分 查看</span><br><span class="line">SELECT `StudentNo`,`StudentResult`+1 AS &#x27;提分后&#x27; FROM result</span><br></pre></td></tr></table></figure><p>数据库中的表达式： 文本值，列，Null , 函数，计算表达式，系统变量…</p><p>select 表达式 from 表</p><h3 id="where-条件子句"><a href="#where-条件子句" class="headerlink" title="where 条件子句"></a>where 条件子句</h3><p>作用：检索数据中符合条件的值</p><p>逻辑运算符</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">语法</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">and &amp;&amp;</td><td style="text-align:center">a and b a&amp;&amp;b</td><td style="text-align:center">逻辑与</td></tr><tr><td style="text-align:center">or \</td><td style="text-align:center">\</td><td style="text-align:center"></td><td>a or b a</td><td>逻辑或</td></tr><tr><td style="text-align:center">Not !=</td><td style="text-align:center">not a !a</td><td style="text-align:center">逻辑非</td></tr></tbody></table></div><p>尽量使用英文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询考试成绩在95分到100分之间</span><br><span class="line">SELECT `StduentNo`,`StudentResult` FROM result</span><br><span class="line">WHERE StudentResult &gt;=95 AND StudentResult&lt;=100</span><br><span class="line"></span><br><span class="line">-- 模糊查询（区间）</span><br><span class="line">SELECT `StduentNo`,`StudentResult` FROM result</span><br><span class="line">WHERE StudentResult BETWEEN 95 AND 100</span><br><span class="line"></span><br><span class="line">-- 除了1000号学生之外的同学成绩</span><br><span class="line">SELECT `StduentNo`,`StudentResult` FROM result</span><br><span class="line">WHERE NOT StudentNo = 1000</span><br></pre></td></tr></table></figure><p>模糊查询：比较运算符</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>运算符</strong></th><th style="text-align:center"><strong>语法</strong></th><th style="text-align:center"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center">I S NULL</td><td style="text-align:center">a is null</td><td style="text-align:center">如果操作符为null 结果为真</td></tr><tr><td style="text-align:center">IS NOT NULL</td><td style="text-align:center">a is not null</td><td style="text-align:center">如果操作符为not null 结果为真</td></tr><tr><td style="text-align:center">BETWEEN</td><td style="text-align:center">a between b and c</td><td style="text-align:center">若a在b 和c之间则为真</td></tr><tr><td style="text-align:center"><strong>LIKE</strong></td><td style="text-align:center">a like b</td><td style="text-align:center">SQL匹配，如果a 匹配到b 则为真</td></tr><tr><td style="text-align:center"><strong>IN</strong></td><td style="text-align:center">a in (a1,a2,a3…)</td><td style="text-align:center">假设a 在 a1,a2,a3其中的某一个中，为真</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">--  查询姓刘的同学</span><br><span class="line">-- like结合 %（代表0到任意字符）  _(一个字符)</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE StudentName LIKE &#x27;刘%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学，名字后只有一个字</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE StudentName LIKE &#x27;刘_&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学，名字后只有两个字</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE StudentName LIKE &#x27;刘__&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询名字中间有嘉字的同学 %嘉%</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE StudentName LIKE &#x27;%嘉%&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===================IN(具体的一个或者多个值)===========================</span><br><span class="line">-- 查询1001 1002 1003 学员信息</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE StudentNo = 1001</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE StudentNo = 1002</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE StudentNo = 1003</span><br><span class="line"></span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE StudentNo IN (1001,1002,1003);</span><br><span class="line"></span><br><span class="line">-- 查询在北京的学生</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE `Address` IN(&#x27;安徽&#x27;,&#x27;河南洛阳&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===================NULL NOT NULL===================================</span><br><span class="line">-- 查询地址为空的学生 null &#x27;&#x27;</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE address=&#x27;&#x27;OR address IS NULL</span><br><span class="line"></span><br><span class="line">-- 查询有出生日期的同学  不为空</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM `student`</span><br><span class="line">WHERE `BornDate` IS NOT NULL;</span><br></pre></td></tr></table></figure><h3 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h3><h4 id="JOIN-对比"><a href="#JOIN-对比" class="headerlink" title="JOIN 对比"></a>JOIN 对比</h4><p><img src="https://img-blog.csdnimg.cn/20200708013553742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200708013558863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">======================联表查询 join ==============================</span><br><span class="line">-- 查询参加考试的同学 （学号，姓名，考试编号，分数）</span><br><span class="line"></span><br><span class="line">SELECT * FROM student </span><br><span class="line">SELECT * FROM result</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">1. 分析需求，分析查询的字段来自哪些表</span><br><span class="line">   2.确定使用哪种连接查询？7种</span><br><span class="line">   确定交叉点（这两个表中哪个数据是相同的）</span><br><span class="line">   判断的条件： 学生表中 studentNo = 成绩表中 studentNo </span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-- JION（表） ON （判断的条件）连接查询</span><br><span class="line">-- where 等值查询</span><br><span class="line">SELECT studentNo,studentName,SubjectNo,StudentResult</span><br><span class="line">FROM student AS s</span><br><span class="line">INNER JOIN result AS r</span><br><span class="line">WHERE s.studentNo=r.studentNo</span><br><span class="line"></span><br><span class="line">--Right Join</span><br><span class="line">SELECT s.studentNo,studentName,SubjectNo,StudentResult</span><br><span class="line">FROM student AS s</span><br><span class="line">RIGHT JOIN result AS r</span><br><span class="line">ON s.studentNo = r.studentNo</span><br><span class="line"></span><br><span class="line">--LEFT Join</span><br><span class="line">SELECT s.studentNo,studentName,SubjectNo,StudentResult</span><br><span class="line">FROM student AS s</span><br><span class="line">LEFT JOIN result AS r</span><br><span class="line">ON s.studentNo = r.studentNo</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>操作</strong></th><th style="text-align:center"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center">Inner join</td><td style="text-align:center">如果表中至少有一个匹配，就返回行</td></tr><tr><td style="text-align:center">left join</td><td style="text-align:center">即使左表中没有匹配，也会从左表中返回所有的值</td></tr><tr><td style="text-align:center">right jion</td><td style="text-align:center">即使右表中没有匹配，也会从右表中返回所有的值</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 查询考的同学</span><br><span class="line">SELECT s.studentNo,studentName,SubjectNo,StudentResult</span><br><span class="line">FROM student AS s</span><br><span class="line">LEFT JOIN result AS r</span><br><span class="line">ON s.studentNo = r.studentNo</span><br><span class="line">WHERE StudentResult IS NULL</span><br><span class="line"></span><br><span class="line">-- 查询了参加考试同学的信息：学号：学生姓名：科目名：分数</span><br><span class="line">SELECT s.`studentNo`,`studentName`,`SubjectName`,`studentResult`</span><br><span class="line">FROM student s</span><br><span class="line">RIGHT JOIN result r</span><br><span class="line">ON r.studentNo=s.studentNo</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.SubjectNo=sub.SubjectNo</span><br><span class="line"></span><br><span class="line">-- 我要查询哪些数据 SELECT ....</span><br><span class="line">-- 从哪几个表中查 FROM 表 xxx JOIN 连接的表 ON 交叉条件</span><br><span class="line">-- 假设存在一中多张表查询，先查询两章表，然后再慢慢增加</span><br><span class="line"></span><br><span class="line">--FROM a LEFT JOIN b   左为准</span><br><span class="line">--FROM a RIGHT JOIN b右为准</span><br></pre></td></tr></table></figure><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>自己的表跟自己的表连接，核心：一张表拆为两张一样的表</p><p>父类</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>categoryid</strong></th><th style="text-align:center"><strong>categoryName</strong></th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">信息技术</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">信息技术</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">信息技术</td></tr></tbody></table></div><p>子类</p><div class="table-container"><table><thead><tr><th><strong>pid</strong></th><th><strong>categoryid</strong></th><th><strong>categoryName</strong></th></tr></thead><tbody><tr><td>3</td><td>4</td><td>数据库</td></tr><tr><td>2</td><td>8</td><td>办公信息</td></tr><tr><td>3</td><td>6</td><td>web开发</td></tr><tr><td>5</td><td>7</td><td>ps技术</td></tr></tbody></table></div><p>操作：查询父类对应子类关系</p><p>父类    子类</p><div class="table-container"><table><thead><tr><th><strong>父类</strong></th><th><strong>子类</strong></th></tr></thead><tbody><tr><td>信息技术</td><td>办公信息</td></tr><tr><td>软件开发</td><td>数据库</td></tr><tr><td>软件开发</td><td>web开发</td></tr><tr><td>美术设计</td><td>ps技术</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询父子信息</span><br><span class="line"></span><br><span class="line">SELECT a.`categroryName` AS `父栏目`,b.`categroryName` AS `子栏目`</span><br><span class="line">FROM `catgroy` AS a,`catgroy` AS b</span><br><span class="line">WHERE a.`categoryid`=b.`pid`</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询学员所属的年级（学号，学生的姓名，年级）</span><br><span class="line">SELECT studentNo,studentName,gradeName</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN `grade` g</span><br><span class="line">ON s.`GradeId`=g.`GradeId`</span><br></pre></td></tr></table></figure><h3 id="分页和排序"><a href="#分页和排序" class="headerlink" title="分页和排序"></a>分页和排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">============================分页 limit 和排序order by=================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 排序：  升序ASC  降序  DESC</span><br><span class="line">SELECT  xx</span><br><span class="line">FROM xx</span><br><span class="line">JOIN xx</span><br><span class="line">WHERE  xx</span><br><span class="line">ORDER BY  xx</span><br><span class="line">ASC   ||  DESC</span><br></pre></td></tr></table></figure><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 为什么要分页</span><br><span class="line">-- 缓解数据库压力，给人的体验更好</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 分页，每页显示五条数据</span><br><span class="line"></span><br><span class="line">-- 语法： limit 当前页，页面的大小</span><br><span class="line">-- limit 0,5 1-5</span><br><span class="line">-- limit 1,5 1-5</span><br><span class="line">-- limit 6,5</span><br><span class="line">SELECT s.`StudentNo`,`StudentName`,`SubjectName`,`StudentResult`</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN `result` r</span><br><span class="line">ON s.`StudentNo`=r.`StudentNo`</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.`subjectNo`=sub.`subjectNo`</span><br><span class="line">WHERE subjectName=&#x27;数据结构-1&#x27;</span><br><span class="line">ORDER BY StudentResult ASC</span><br><span class="line">LIMIT 0,5</span><br><span class="line"></span><br><span class="line">-- 第一页 limit 0,5</span><br><span class="line">-- 第二页 limit 5,5</span><br><span class="line">-- 第三页 limit 10,5</span><br><span class="line">-- 第N页 limit 5*（n-1）,5</span><br></pre></td></tr></table></figure><p>语法 <code>limit(查询起始下标，pagesize)</code></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>where (这个值是计算出来的)</p><p>本质：<code>在where语句中嵌套一个子查询语句</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">-- ===========================where=========================</span><br><span class="line"></span><br><span class="line">-- 1.查询 数据库结构-1的所有考试结构（学号，科目编号，成绩） 降序</span><br><span class="line">-- 方式一： 连接查询</span><br><span class="line">SELECT `StudentNo`,r.`SubjectName`,`StudentResult`</span><br><span class="line">FROM `result` r</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.SubjectNo = sun.SubjectNo</span><br><span class="line">WHERE subjectName = &#x27;数据库结构-1&#x27;</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line"></span><br><span class="line">-- 方式二：使用子查询(由里及外)</span><br><span class="line">SELECT `StudentNo`,r.`SubjectName`,`StudentResult`</span><br><span class="line">FROM `result`</span><br><span class="line">WHERE StudentNo=(</span><br><span class="line">SELECT SubjectNo FROM  `subject` </span><br><span class="line">    WHERE SubjectName = &#x27;数据库结构-1&#x27;</span><br><span class="line">)</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 分数不少于80分的学生的学号和姓名</span><br><span class="line">SELECT DISTINCT s.`StudentNo`,`StudentName`</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.StudentNo = s.StudentNo</span><br><span class="line">WHERE StudentResult&gt;=80</span><br><span class="line"></span><br><span class="line">-- 在这个基础上 增加一个科目 ，高等数学-2</span><br><span class="line">SELECT DISTINCT s.`StudentNo`,`StudentName`</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.StudentNo = s.StudentNo</span><br><span class="line">WHERE StudentResult&gt;=80 AND `SubjectNo`=(</span><br><span class="line">    SELECT Subject FROM `subject`</span><br><span class="line">    WHERE SubjectName=&#x27;高等数学-2&#x27;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- 查询课程为 高等数学-2 且分数不小于80分的同学的学号和姓名</span><br><span class="line">SELECT s.`StudentNo`,`StudentName`</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON s.StudentNo = r.StudentNo</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.`SubjectName`=&#x27;高等数学-2&#x27;</span><br><span class="line">WHERE `SubjectaName`=&#x27;高等数学-2&#x27; AND StudentResult &gt;=80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 再改造 (由里即外)</span><br><span class="line">SELECT `StudentNo`,`StudentName` FROM student</span><br><span class="line">WHERE StudentNo IN(</span><br><span class="line">SELECT StudentNo result WHERE StudentResult &gt;80 AND SubjectNo =(</span><br><span class="line">SELECT SubjectNo FROM `subject` WHERE `SubjectaName`=&#x27;高等数学-2&#x27;</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 查询不同课程的平均分，最高分，最低分，平均分大于80</span><br><span class="line">-- 核心：（根据不同的课程分组）</span><br><span class="line"></span><br><span class="line">SELECT `SubjectName`,AVG(StudentResult),MAX(StudentResult)</span><br><span class="line">FROM result r</span><br><span class="line">INNER JOIN `Subject` sub</span><br><span class="line">ON r.SubjectNo=sub.SubjectNo</span><br><span class="line"></span><br><span class="line">GROUP BY r.SubjectNo -- 通过什么字段来分组</span><br><span class="line">HAVING AVG(StudentResult)&gt;80</span><br></pre></td></tr></table></figure><h2 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">-- 数学运算</span><br><span class="line"></span><br><span class="line">SELECT ABS(-8) -- 绝对值</span><br><span class="line">SELECT CEILING(9.4) -- 向上取整</span><br><span class="line">SELECT FLOOR(9.4)  -- 向下取整</span><br><span class="line">SELECT RAND() -- 返回0-1随机数</span><br><span class="line">SELECT SIGN(-10) -- 判断一个数的符号 0-0 负数返回-1 正数返回1</span><br><span class="line"></span><br><span class="line">-- 字符串函数</span><br><span class="line">SELECT CHAR_LENGTH(&#x27;2323232&#x27;) -- 返回字符串长度</span><br><span class="line">SELECT CONCAT(&#x27;我&#x27;,&#x27;233&#x27;) -- 拼接字符串</span><br><span class="line">SELECT INSERT(&#x27;java&#x27;,1,2,&#x27;cccc&#x27;) -- 从某个位置开始替换某个长度</span><br><span class="line">SELECT UPPER(&#x27;abc&#x27;) </span><br><span class="line">SELECT LOWER(&#x27;ABC&#x27;)</span><br><span class="line">SELECT REPLACE(&#x27;坚持就能成功&#x27;,&#x27;坚持&#x27;,&#x27;努力&#x27;)</span><br><span class="line"></span><br><span class="line">-- 查询姓 周 的同学 ，改成邹</span><br><span class="line">SELECT REPLACE(studentname,&#x27;周&#x27;,&#x27;邹&#x27;) FROM student</span><br><span class="line">WHERE studentname LIKE &#x27;周%&#x27;</span><br><span class="line"></span><br><span class="line">-- 时间跟日期函数（记住）</span><br><span class="line">SELECT CURRENT_DATE() -- 获取当前日期</span><br><span class="line">SELECT CURDATE() -- 获取当前日期</span><br><span class="line">SELECT NOW() -- 获取当前日期</span><br><span class="line">SELECT LOCATIME()  -- 本地时间</span><br><span class="line">SELECT SYSDATE()  -- 系统时间</span><br><span class="line"></span><br><span class="line">SELECT YEAR(NOW())</span><br><span class="line">SELECT MONTH(NOW())</span><br><span class="line">SELECT DAY(NOW())</span><br><span class="line">SELECT HOUR(NOW())</span><br><span class="line">SELECT MINUTE(NOW())</span><br><span class="line">SELECT SECOND(NOW())</span><br><span class="line"></span><br><span class="line">-- 系统</span><br><span class="line">SELECT SYSTEM_USER()</span><br><span class="line">SELECT USER()</span><br><span class="line">SELECT VERSION()</span><br></pre></td></tr></table></figure><h3 id="聚合函数（常用）"><a href="#聚合函数（常用）" class="headerlink" title="聚合函数（常用）"></a>聚合函数（常用）</h3><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>函数名称</strong></th><th style="text-align:center"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>COUNT()</strong></td><td style="text-align:center">计数</td></tr><tr><td style="text-align:center">SUM()</td><td style="text-align:center">求和</td></tr><tr><td style="text-align:center">AVG()</td><td style="text-align:center">平均值</td></tr><tr><td style="text-align:center">MAX()</td><td style="text-align:center">最大值</td></tr><tr><td style="text-align:center">MIN()</td><td style="text-align:center">最小值</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table></div><h3 id="数据库级别MD5加密（拓展）"><a href="#数据库级别MD5加密（拓展）" class="headerlink" title="数据库级别MD5加密（拓展）"></a>数据库级别MD5加密（拓展）</h3><p>什么是MD5</p><p>主要增强算法复杂度不可逆性。</p><p>MD5不可逆，具体的MD5是一样的</p><p>MD5破解原理，背后有一个字典，MD5加密后的值，加密前的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `testmd5`(</span><br><span class="line">`id` INT(4) NOT NULL,</span><br><span class="line">`name` VARCHAR(20) NOT NULL,</span><br><span class="line">`pwd` VARCHAR(50) NOT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line"></span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=UTF8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 明文密码</span><br><span class="line">INSERT INTO testmd5 VALUES(1,&#x27;张三&#x27;,&#x27;123456&#x27;),(2,&#x27;李四&#x27;,&#x27;123456&#x27;),(3,&#x27;王五&#x27;,&#x27;123456&#x27;)</span><br><span class="line"></span><br><span class="line">-- 加密</span><br><span class="line">UPDATE testmd5 SET pwd=MD5(pwd) WHERE id =1</span><br><span class="line">UPDATE testmd5 SET pwd=MD5(pwd) WHERE id !=1  -- 加密全部</span><br><span class="line"></span><br><span class="line">-- 插入时加密</span><br><span class="line"></span><br><span class="line">INSERT INTO testmd5 VALUES(4,&#x27;小明&#x27;,MD5(&#x27;123456&#x27;))</span><br><span class="line">INSERT INTO testmd5 VALUES(5,&#x27;红&#x27;,MD5(&#x27;123456&#x27;))</span><br><span class="line"></span><br><span class="line">-- 如何校验，将用户传递过来的密码，进行MD5加密，然后对比加密后的值</span><br><span class="line">SELECT * FROM testmd5 WHERE `name`=&#x27;红&#x27; AND pwd=MD5(&#x27;123456&#x27;)</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>要么都成功，要么都失败</p><hr><p>SQL执行， A给B转账 A 1000–&gt; 200 B200<br>SQL 执行， B收到A的钱 A800 — B400</p><hr><p>将一组SQL放在一个批次中执行</p><h4 id="事务原则-："><a href="#事务原则-：" class="headerlink" title="事务原则 ："></a>事务原则 ：</h4><p>ACID原则 原子性，一致性，隔离性，持久性 （脏读，幻读…）</p><p>原子性（Atomicity）</p><p>要么都成功，要么都失败</p><p>一致性（Consistency）</p><p>事务前后的数据完整性要保持一致</p><p>持久性（Durability）–事务提交</p><p>事务一旦提交就不可逆转，被持久化到数据库中</p><p>隔离性</p><p>事务产生多并发时，互不干扰</p><h4 id="隔离产生的问题"><a href="#隔离产生的问题" class="headerlink" title="隔离产生的问题"></a>隔离产生的问题</h4><p>脏读：<br>指一个事务读取了另外一个事务未提交的数据。</p><p>不可重复读：<br>在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）</p><p>虚读(幻读)<br>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。<br>（一般是行影响，多了一行）</p><h4 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- mysql 自动开启事务提交</span><br><span class="line">SET autocommit=0 -- 关闭</span><br><span class="line">SET autocommit=1 -- 开启（默认的）</span><br><span class="line"></span><br><span class="line">-- 手动处理事务</span><br><span class="line">SET autocommit =0 -- 关闭自动提交</span><br><span class="line"></span><br><span class="line">-- 事务开启</span><br><span class="line"></span><br><span class="line">START TRANSACTION -- 标记一个事务的开始，从这个之后的SQP都在同一个事务内</span><br><span class="line"></span><br><span class="line">INSERT XX</span><br><span class="line">INSERT XX</span><br><span class="line"></span><br><span class="line">-- 提交 ： 持久化(成功)</span><br><span class="line">COMMIT </span><br><span class="line">-- 回滚：  回到原来的样子（失败）</span><br><span class="line">ROLLBACK</span><br><span class="line">-- 事务结束</span><br><span class="line">SET autocommit = 1 -- 开启自动提交</span><br><span class="line">-- 了解</span><br><span class="line">SAVEPOINT 保存点名称 -- 设置一个事务的保存点</span><br><span class="line">ROLLBACK TO SAVEPOINT 保存点名 -- 回滚到保存点</span><br><span class="line">RELEASE SAVEPOINT 保存点 -- 删除保存点</span><br></pre></td></tr></table></figure><h4 id="模拟场景"><a href="#模拟场景" class="headerlink" title="模拟场景"></a>模拟场景</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE shop CHARACTER SET utf8 COLLATE utf8_general_ci</span><br><span class="line">USE shop</span><br><span class="line">CREATE TABLE `account`(</span><br><span class="line">`id` INT(3) NOT NULL AUTO_INCREMENT,</span><br><span class="line">`name` VARCHAR(30) NOT NULL,</span><br><span class="line">`money` DECIMAL(9,2) NOT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO account(`name`,`money`)</span><br><span class="line">VALUES(&#x27;A&#x27;,2000),(&#x27;B&#x27;,10000)</span><br><span class="line"></span><br><span class="line">-- 模拟转账：事务</span><br><span class="line">SET autocommit = 0; -- 关闭自动提交</span><br><span class="line">START TRANSACTION -- 开启事务（一组事务）</span><br><span class="line">UPDATE account SET money = money-500 WHERE `name` = &#x27;A&#x27; -- A 转账给B</span><br><span class="line">UPDATE account SET money = money+500 WHERE `name` = &#x27;B&#x27; -- B 收到钱</span><br><span class="line"></span><br><span class="line">COMMIT ; -- 提交事务</span><br><span class="line">ROLLBACK ; -- 回滚</span><br><span class="line"></span><br><span class="line">SET autocommit=1 -- 恢复默认值</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</p><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p><ul><li>主键索引 （PRIMARY KEY）<ul><li>唯一的标识，主键不可重复，只能有一个列作为主键</li></ul></li><li>唯一索引 （UNIQUE KEY）<ul><li>避免重复的列出现，唯一索引可以重复，多个列都可以标识唯一索引</li></ul></li><li>常规索引（KEY/INDEX）<ul><li>默认的，index,key关键字来设置</li></ul></li><li>全文索引（FULLTEXT）<ul><li>在特点的数据库引擎下才有，MyISAM</li><li>快速定位数据</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 索引的使用</span><br><span class="line">-- 1.在创建表的时候给字段增加索引</span><br><span class="line">-- 2.创建完毕后，增加索引</span><br><span class="line"></span><br><span class="line">-- 显示所有的索引信息</span><br><span class="line">SHOW INDEX FROM 表</span><br><span class="line"></span><br><span class="line">-- 增加一个索引</span><br><span class="line">ALTER TABLE 表 ADD FULLTEXT INDEX 索引名（字段名）</span><br><span class="line"></span><br><span class="line">-- EXPLAIN 分析sql执行状况</span><br><span class="line">EXPLAIN SELECT * FROM student -- 非全文索引</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试索引"><a href="#测试索引" class="headerlink" title="测试索引"></a>测试索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `app_user` (</span><br><span class="line">`id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">`name` VARCHAR(50) DEFAULT &#x27;&#x27;,</span><br><span class="line">`email` VARCHAR(50) NOT NULL,</span><br><span class="line">`phone` VARCHAR(20) DEFAULT &#x27;&#x27;,</span><br><span class="line">`gender` TINYINT(4) UNSIGNED DEFAULT &#x27;0&#x27;,</span><br><span class="line">`password` VARCHAR(100) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">`age` TINYINT(4) DEFAULT NULL,</span><br><span class="line">`create_time` DATETIME DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">`update_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 插入100万数据</span><br><span class="line">DELIMITER $$ --  写函数之前必写</span><br><span class="line">CREATE FUNCTION mock_data()</span><br><span class="line">RETURNS INT </span><br><span class="line">BEGIN</span><br><span class="line">DECLARE num INT DEFAULT 1000000;</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line"></span><br><span class="line">WHILE i&lt;num DO</span><br><span class="line">-- 插入语句</span><br><span class="line">INSERT INTO app_user(`name`,`email`,`phone`,`gender`,`password`,`age`)</span><br><span class="line">VALUE(CONCAT(&#x27;用户&#x27;,i),&#x27;534240118@qq.com&#x27;,FLOOR (CONCAT(&#x27;18&#x27;,RAND()*9999999)),FLOOR (RAND()*2),</span><br><span class="line">UUID(),FLOOR (RAND()*100));</span><br><span class="line"></span><br><span class="line">SET i = i+1;</span><br><span class="line">END WHILE;</span><br><span class="line">RETURN i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">INSERT INTO app_user(`name`,`email`,`phone`,`gender`,`password`,`age`)</span><br><span class="line">VALUE(CONCAT(&#x27;用户&#x27;,i),&#x27;534240118@qq.com&#x27;,FLOOR (CONCAT(&#x27;18&#x27;,RAND()*9999999)),FLOOR (RAND()*2),</span><br><span class="line">UUID(),FLOOR (RAND()*100))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT mock_data();</span><br><span class="line"></span><br><span class="line">SELECT * FROM app_user WHERE `name`=&#x27;用户9999&#x27; -- 接近半秒</span><br><span class="line"></span><br><span class="line">EXPLAIN SELECT * FROM app_user WHERE `name`=&#x27;用户9999&#x27;  -- 查询99999条记录</span><br><span class="line"></span><br><span class="line">-- id _ 表名_字段名</span><br><span class="line">-- create index on 字段</span><br><span class="line">CREATE INDEX id_app_user_name ON app_user(`name`); -- 0.001 s</span><br><span class="line">EXPLAIN SELECT * FROM app_user WHERE `name`=&#x27;用户9999&#x27;  -- 查询一条记录</span><br></pre></td></tr></table></figure><p>索引在小数据的时候，用处不大，但是在大数据的时候，区别十分明显</p><h3 id="索引原则"><a href="#索引原则" class="headerlink" title="索引原则"></a>索引原则</h3><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表不需要加索引</li><li>索引一般加在常用来查询的字段上</li></ul><h4 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h4><p>Hash 类型的索引</p><p>Btree: 默认innodb 的数据结构</p><p>阅读： <a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p><h2 id="权限管理和备份"><a href="#权限管理和备份" class="headerlink" title="权限管理和备份"></a>权限管理和备份</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="SQLyog-可视化管理"><a href="#SQLyog-可视化管理" class="headerlink" title="SQLyog 可视化管理"></a>SQLyog 可视化管理</h4><p><img src="https://img-blog.csdnimg.cn/20200708013449970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="SQL命令操作"><a href="#SQL命令操作" class="headerlink" title="SQL命令操作"></a>SQL命令操作</h4><p>用户表：mysql.user</p><p>本质：对这张表进行，增删改查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户  CREATE USER 用户名 IDENTIFIED BY &#x27;密码&#x27;</span><br><span class="line">CREATE USER sanjin IDENTIFIED BY &#x27;123456&#x27;</span><br><span class="line"></span><br><span class="line">-- 修改密码（修改当前密码）</span><br><span class="line">SET PASSWORD = PASSWORD(&#x27;111111&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 修改密码（修改指定用户密码）</span><br><span class="line"></span><br><span class="line">SET PASSWORD FOR sanjin = PASSWORD(&#x27;111111&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 重命名  rename user 原名字 to 新名字</span><br><span class="line">RENAME USER sanjin TO sanjin2</span><br><span class="line"></span><br><span class="line">-- 用户授权   ALL PRIVILEGES 全部的权限   库，表</span><br><span class="line">-- ALL PRIVILEGES 除了给别人授权，其他都能干</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO sanjin2</span><br><span class="line"></span><br><span class="line">-- 查询权限</span><br><span class="line">SHOW GRANTS FOR sanjin2  -- 查看指定用户的权限</span><br><span class="line">SHOW GRANTS FOR root@localhost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 撤销权限 REVOKE 哪些权限，在哪个库撤销，给谁撤销</span><br><span class="line">REVOKE ALL PRIVILEGES ON *.* FROM sanjin2</span><br><span class="line"></span><br><span class="line">-- 删除用户</span><br><span class="line">DROP USER sanjin2</span><br></pre></td></tr></table></figure><h3 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h3><p>为什么备份：</p><ul><li>保证重要数据不丢失</li><li>数据转移</li></ul><p>MySQL数据库备份的方式</p><ul><li><p>直接拷贝物理文件</p></li><li><p>在SQLyog这种可视化工具中手动导出</p><ul><li>在想要导出的表或者库中，右键选择备份和导出</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20200708013418659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200708013426360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="规范数据库设计"><a href="#规范数据库设计" class="headerlink" title="规范数据库设计"></a>规范数据库设计</h2><p>当数据库比较复杂的时候，我们就需要设计了</p><p>糟糕的数据库设计：</p><ul><li>数据冗余，浪费空间</li><li>数据库插入和删除都会麻烦，异常【屏蔽使用物理外键】</li><li>程序的性能差</li></ul><p>良好的数据库设计：</p><ul><li>节省内存空间</li><li>保证数据库的完整性</li><li>方便我们开发系统</li></ul><p>软件开发中，关于数据库的设计</p><ul><li>分析需求：分析业务和需要处理的数据库的需求</li><li>概要设计：设计关系图 E-R图</li></ul><p>设计数据库的步骤（个人博客）</p><ul><li><p>收集信息，分析需求</p><ul><li>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</li><li>分类表（文章分类，谁创建的）</li><li>文章表（文章的信息）</li><li>友链表（友链信息）</li><li>自定义表（系统信息，某个关键的字，或者某些主字段）</li><li>说说表（发表心情…id ,content ,time）</li></ul></li><li>标识实体（把需求落地到每个字段）</li><li><p>标识实体之间的关系</p><ul><li>写博客 user–&gt;blog</li><li>创建分类 user–&gt;category</li><li>关注 user–&gt;user</li><li>友链–&gt;links</li><li>评论 user–&gt;user</li></ul></li></ul><h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><p>为什么需要数据规范化？</p><ul><li><p>信息重复</p></li><li><p>更新异常</p></li><li><p>插入异常</p></li><li><p>删除异常</p><ul><li>无法正常显示异常</li></ul></li><li>删除异常<ul><li>丢失有效的信息</li></ul></li></ul><p>三大范式</p><p>第一范式（1NF）</p><p>原子性：保证每一列不可再分</p><p>第二范式（2NF）</p><p>前提：满足第一范式</p><p>每张表只描述一件事情</p><p>第三范式（3NF）</p><p>前提：满足第一范式和第二范式</p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p>（规范数据库的设计）</p><h3 id="规范性和性能的问题"><a href="#规范性和性能的问题" class="headerlink" title="规范性和性能的问题"></a>规范性和性能的问题</h3><p>关联查询的表，不得超过三张表</p><ul><li>考虑商业化的需求和目标（成本和用户体验） 数据库的性能更加重要</li><li>再规范性能的问题的时候，需要适当的考虑一下，规范性</li><li>故意给某些表加一些冗余的字段（从多表，变成单表）</li><li>故意增加一些计算列（从大数据量降低为小数据量的查询：索引）</li></ul><h2 id="JDBC-重点"><a href="#JDBC-重点" class="headerlink" title="JDBC(重点)"></a>JDBC(重点)</h2><h3 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h3><p>驱动：声卡，显卡，数据库</p><p><img src="https://img-blog.csdnimg.cn/20200708013306539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们的程序会通过数据库驱动，和数据库打交道！</p><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>SUN 公司为了简化开发人员的（对数据库的统一）操作，提供了一个(Java操作数据库的)规范，JDBC</p><p>这些规范的实现由具体的厂商去做</p><p>对于开发人员来说，我们只需要掌握JDBC的接口操作即可</p><p><img src="https://img-blog.csdnimg.cn/20200708013314340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>java.sql</p><p>javax.sql</p><p>还需要导入数据库驱动包</p><h3 id="第一个JDBC程序"><a href="#第一个JDBC程序" class="headerlink" title="第一个JDBC程序"></a>第一个JDBC程序</h3><p>创建测试数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE jdbcStudy CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line">USE jdbcStudy;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `users`(</span><br><span class="line">id INT PRIMARY KEY,</span><br><span class="line">NAME VARCHAR(40),</span><br><span class="line">PASSWORD VARCHAR(40),</span><br><span class="line">email VARCHAR(60),</span><br><span class="line">birthday DATE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO `users`(id,NAME,PASSWORD,email,birthday)</span><br><span class="line">VALUES(1,&#x27;zhansan&#x27;,&#x27;123456&#x27;,&#x27;zs@sina.com&#x27;,&#x27;1980-12-04&#x27;),</span><br><span class="line">(2,&#x27;lisi&#x27;,&#x27;123456&#x27;,&#x27;lisi@sina.com&#x27;,&#x27;1981-12-04&#x27;),</span><br><span class="line">(3,&#x27;wangwu&#x27;,&#x27;123456&#x27;,&#x27;wangwu@sina.com&#x27;,&#x27;1979-12-04&#x27;)</span><br></pre></td></tr></table></figure><p>1.创建一个普通项目</p><p>2.导入数据库驱动</p><p>3.编写测试代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.lesson01;</span><br><span class="line">//我的第一个JDBC程序</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class JdbcFirstDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //1. 加载驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//固定写法</span><br><span class="line">        //2. 用户信息和url</span><br><span class="line">        //useUnicode=true&amp;characterEncoding=utf8&amp;&amp;useSSL=true</span><br><span class="line">        String url =&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;&amp;useSSL=false&quot;;</span><br><span class="line">        String name = &quot;root&quot;;</span><br><span class="line">        String password = &quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">    //3. 连接成功，返回数据库对象  connection代表数据库</span><br><span class="line">    Connection connection= DriverManager.getConnection(url,name,password);</span><br><span class="line">    //4. 执行SQL的对象 statement 执行SQL的对象</span><br><span class="line">    Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">    //5. 执行SQL的对象 去执行SQL   可能存在结果，查看返回结果</span><br><span class="line">    String sql=&quot;SELECT * FROM users&quot;;</span><br><span class="line">    ResultSet resultSet = statement.executeQuery(sql);//返回的结果集,结果集中封装了我们全部查询的结果</span><br><span class="line">    while(resultSet.next())&#123;</span><br><span class="line">        System.out.println(&quot;id+&quot;+resultSet.getObject(&quot;id&quot;));</span><br><span class="line">        System.out.println(&quot;name+&quot;+resultSet.getObject(&quot;NAME&quot;));</span><br><span class="line">        System.out.println(&quot;password+&quot;+resultSet.getObject(&quot;PASSWORD&quot;));</span><br><span class="line">        System.out.println(&quot;email+&quot;+resultSet.getObject(&quot;email&quot;));</span><br><span class="line">        System.out.println(&quot;birthday+&quot;+resultSet.getObject(&quot;birthday&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //6. 释放连接</span><br><span class="line">    resultSet.close();</span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤总结：<br>1.加载驱动</p><p>2.连接数据库 DriverManager</p><p>3.获取执行SQL的对象 Statement</p><p>4.获得返回的结果集</p><p>5.释放连接</p><h4 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//固定写法</span><br><span class="line">Connection connection= DriverManager.getConnection(url,name,password);</span><br><span class="line"></span><br><span class="line">//connection代表数据库</span><br><span class="line">//数据库设置自动提交</span><br><span class="line">//事务提交</span><br><span class="line">//事务回滚</span><br><span class="line">connection.rollback();</span><br><span class="line">connection.commit();</span><br><span class="line">connection.setAutoCommit();</span><br></pre></td></tr></table></figure><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String url =&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;&amp;useSSL=false&quot;;</span><br><span class="line"></span><br><span class="line">//mysql 默认3306</span><br><span class="line">//协议://主机地址:端口号/数据库名？参数1&amp;参数2&amp;参数3</span><br><span class="line"></span><br><span class="line">//Oracle   1521</span><br><span class="line">//jdbc:oralce:thin:@localhost:1521:sid</span><br></pre></td></tr></table></figure><h4 id="statement-执行SQL的对象-pPrepareStatement-执行SQL的对象"><a href="#statement-执行SQL的对象-pPrepareStatement-执行SQL的对象" class="headerlink" title="statement 执行SQL的对象 pPrepareStatement 执行SQL的对象"></a>statement 执行SQL的对象 pPrepareStatement 执行SQL的对象</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String sql=&quot;SELECT * FROM users&quot;;//编写Sql</span><br><span class="line"></span><br><span class="line">statement.executeQuery();</span><br><span class="line">statement.execute();</span><br><span class="line">statement.executeUpdate();//更新，插入，删除，返回一个受影响的行数</span><br></pre></td></tr></table></figure><p>ResultSet 查询的结果集，封装了所以的查询结果</p><h4 id="获得指定的数据类型"><a href="#获得指定的数据类型" class="headerlink" title="获得指定的数据类型"></a>获得指定的数据类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ResultSet resultSet = statement.executeQuery(sql);//返回的结果集,结果集中封装了我们全部查询的结果</span><br><span class="line">        resultSet.getObject();//在不知道列类型下使用</span><br><span class="line">        resultSet.getString();//如果知道则指定使用</span><br><span class="line">        resultSet.getInt();</span><br></pre></td></tr></table></figure><h4 id="遍历-指针"><a href="#遍历-指针" class="headerlink" title="遍历,指针"></a>遍历,指针</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resultSet.next(); //移动到下一个</span><br><span class="line">resultSet.afterLast();//移动到最后</span><br><span class="line">resultSet.beforeFirst();//移动到最前面</span><br><span class="line">resultSet.previous();//移动到前一行</span><br><span class="line">resultSet.absolute(row);//移动到指定行</span><br></pre></td></tr></table></figure><h4 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//6. 释放连接</span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();//耗资源</span><br></pre></td></tr></table></figure><h3 id="statement对象"><a href="#statement对象" class="headerlink" title="statement对象"></a>statement对象</h3><p>Jdbc中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。</p><p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的sq|语句， executeUpdate执行完后， 将会返回一个整数(即增删改语句导致了数据库几行数据发生了变化)。</p><p>Statement.executeQuery方法用于向数据库发生查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p><h4 id="CRUD操作-create"><a href="#CRUD操作-create" class="headerlink" title="CRUD操作-create"></a>CRUD操作-create</h4><p>使用executeUpdate(String sql)方法完成数据添加操作，示例操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">        String sql = &quot;insert into user(...) values(...)&quot;;</span><br><span class="line">        int num = statement.executeUpdate(sql);</span><br><span class="line">        if(num&gt;0)&#123;</span><br><span class="line">            System.out.println(&quot;插入成功&quot;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="CRUD操作-delete"><a href="#CRUD操作-delete" class="headerlink" title="CRUD操作-delete"></a>CRUD操作-delete</h4><p>使用executeUpdate(String sql)方法完成数据删除操作，示例操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">        String sql = &quot;delete from user where id =1&quot;;</span><br><span class="line">        int num = statement.executeUpdate(sql);</span><br><span class="line">        if(num&gt;0)&#123;</span><br><span class="line">            System.out.println(&quot;删除成功&quot;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>CURD操作-update</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用executeUpdate(String sql)方法完成数据修改操作，示例操作：</span><br><span class="line"></span><br><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">        String sql = &quot;update user set name =&#x27;&#x27; where name = &#x27;&#x27;&quot;;</span><br><span class="line">        int num = statement.executeUpdate(sql);</span><br><span class="line">        if(num&gt;0)&#123;</span><br><span class="line">            System.out.println(&quot;修改成功&quot;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="CURD操作-read"><a href="#CURD操作-read" class="headerlink" title="CURD操作-read"></a>CURD操作-read</h4><p>使用executeUpdate(String sql)方法完成数据查询操作，示例操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">        String sql = &quot;select * from  user where id =1&quot;;</span><br><span class="line">        ResultSet rs= statement.executeQuery(sql);</span><br><span class="line">        if(rs.next())&#123;</span><br><span class="line">            System.out.println(&quot;&quot;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>代码实现</p><p>1.提取工具类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.lesson02.utils;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static String driver = null;</span><br><span class="line">    private static String url = null;</span><br><span class="line">    private static String username = null;</span><br><span class="line">    private static String password = null;</span><br><span class="line">    static &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;);</span><br><span class="line">            Properties properties = new Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line">            driver=properties.getProperty(&quot;driver&quot;);</span><br><span class="line">            url=properties.getProperty(&quot;url&quot;);</span><br><span class="line">            username=properties.getProperty(&quot;username&quot;);</span><br><span class="line">            password=properties.getProperty(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">        //1.驱动只用加载一次</span><br><span class="line">        Class.forName(driver);</span><br><span class="line"></span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">//2.获取连接</span><br><span class="line">public static Connection getConnection() throws Exception&#123;</span><br><span class="line">    return DriverManager.getConnection(url, username, password);</span><br><span class="line">&#125;</span><br><span class="line">//3.释放资源</span><br><span class="line">public static void release(Connection conn, Statement st, ResultSet rs) throws SQLException &#123;</span><br><span class="line"></span><br><span class="line">    if(rs!=null)&#123;</span><br><span class="line">        rs.close();</span><br><span class="line">    &#125;</span><br><span class="line">    if (st!=null)&#123;</span><br><span class="line">        st.close();</span><br><span class="line">    &#125;</span><br><span class="line">    if(conn!=null)&#123;</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.编写增删改的方法，exectueUpdate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.lesson02.utils;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">import static com.kuang.lesson02.utils.JdbcUtils.*;</span><br><span class="line"></span><br><span class="line">public class TestInnsert &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Connection conn =null;</span><br><span class="line">        Statement st = null;</span><br><span class="line">        ResultSet rs =null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">    try &#123;</span><br><span class="line">         conn = getConnection();//获取连接</span><br><span class="line">        st = conn.createStatement();//获取SQL执行对象</span><br><span class="line">        String sql = &quot;INSERT INTO users(id,`NAME`,`PASSWORD`,`email`,`birthday`)&quot; +</span><br><span class="line">                &quot;VALUES(5,&#x27;sanjin&#x27;,&#x27;123456&#x27;,&#x27;233223@qq.com&#x27;,&#x27;2020-01-01&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">        int i = st.executeUpdate(sql);</span><br><span class="line">        if(i&gt;0)&#123;</span><br><span class="line">            System.out.println(&quot;插入成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    JdbcUtils.release(conn,st,rs);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.查询 executeQuery</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.lesson02.utils;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">import static com.kuang.lesson02.utils.JdbcUtils.*;</span><br><span class="line"></span><br><span class="line">public class TestInnsert &#123;</span><br><span class="line">    public static void main(String[] args) throws SQLException &#123;</span><br><span class="line">        Connection conn =null;</span><br><span class="line">        Statement st = null;</span><br><span class="line">        ResultSet rs =null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">    try &#123;</span><br><span class="line">         conn = getConnection();//获取连接</span><br><span class="line">        st = conn.createStatement();//获取SQL执行对象</span><br><span class="line">        String sql = &quot;select * from users&quot;;</span><br><span class="line">        rs=st.executeQuery(sql);//查询完毕返回结果集</span><br><span class="line"></span><br><span class="line">        while (rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(&quot;NAME&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    JdbcUtils.release(conn,st,rs);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        JdbcUtils.release(conn,st,rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SQL注入问题</p><p>sql存在漏洞，会被攻击导致数据泄露 SQL会被拼接 or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.lesson02.utils;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">import static com.kuang.lesson02.utils.JdbcUtils.getConnection;</span><br><span class="line"></span><br><span class="line">public class SQL注入 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">    //SQL注入</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"> login(&quot;&#x27; or &#x27;1=1&quot;,&quot;123456&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void login(String name,String password)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">    Connection conn =null;</span><br><span class="line">    Statement st = null;</span><br><span class="line">    ResultSet rs =null;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">    try &#123;</span><br><span class="line">        conn = getConnection();//获取连接</span><br><span class="line">        st = conn.createStatement();//获取SQL执行对象</span><br><span class="line">        String sql = &quot;select * from users where `NAME`=&#x27;&quot;+ name +&quot;&#x27;  AND `PASSWORD`=&#x27;&quot;+ password +&quot;&#x27;&quot; ;</span><br><span class="line">        rs=st.executeQuery(sql);//查询完毕返回结果集</span><br><span class="line"></span><br><span class="line">        while (rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(&quot;NAME&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtils.release(conn,st,rs);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreparedStatement对象"><a href="#PreparedStatement对象" class="headerlink" title="PreparedStatement对象"></a>PreparedStatement对象</h3><p>PreparedStatement 可以防止SQL注入 ，效率更高。</p><ol><li>新增</li><li>删除</li><li>查询</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.lesson03;</span><br><span class="line"></span><br><span class="line">import com.kuang.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection connection= null;</span><br><span class="line">        PreparedStatement pstm=null;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">        connection = JdbcUtils.getConnection();</span><br><span class="line">        //区别</span><br><span class="line">        //使用问好占位符代替参数</span><br><span class="line">        String sql = &quot;insert into users(id,`NAME`) values(?,?)&quot;;</span><br><span class="line">        pstm = connection.prepareStatement(sql);//预编译sql，先写sql然后不执行</span><br><span class="line">        //手动赋值</span><br><span class="line">        pstm.setInt(1,8);</span><br><span class="line">        pstm.setString(2,&quot;SANJIN&quot;);</span><br><span class="line"></span><br><span class="line">        //执行</span><br><span class="line">        int i = pstm.executeUpdate();</span><br><span class="line">        if (i&gt;0)&#123;</span><br><span class="line">            System.out.println(&quot;插入成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            JdbcUtils.release(connection,pstm,null);</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防止SQL注入本质，传递字符 带有“ ”，转义字符会被转义</p><p>10.6 使用IDEA连接数据库</p><p><img src="https://img-blog.csdnimg.cn/20200708013123797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>连接成功后，可以选择数据库</p><p><img src="https://img-blog.csdnimg.cn/20200708013148715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>双击数据库</p><p><img src="https://img-blog.csdnimg.cn/20200708013157507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>更新数据</p><p><img src="https://img-blog.csdnimg.cn/20200708013204924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzOTU2NTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>编写sql代码的地方</p><p><img src="https://img-blog.csdnimg.cn/20200708013211958.png" alt="在这里插入图片描述"></p><h3 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h3><p>要么都成功，要么都失败</p><p>ACID原则</p><p>原子性：要么全部完成，要么都不完成</p><p>一致性：结果总数不变</p><p>隔离性：多个进程互不干扰</p><p>持久性：一旦提交不可逆，持久化到数据库了</p><p>隔离性的问题：</p><p>脏读： 一个事务读取了另一个没有提交的事务</p><p>不可重复读：在同一个事务内，重复读取表中的数据，表发生了改变</p><p>虚读（幻读）：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致</p><p>代码实现</p><ol><li><p>开启事务conn.setAutoCommit(false);</p></li><li><p>一组业务执行完毕，提交事务</p></li><li><p>可以在catch语句中显示的定义回滚，但是默认失败会回滚</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.lesson04;</span><br><span class="line"></span><br><span class="line">import com.kuang.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class Action &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">    Connection conn =null;</span><br><span class="line">    PreparedStatement ps = null;</span><br><span class="line">    ResultSet rs = null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        conn = JdbcUtils.getConnection();</span><br><span class="line">        //关闭数据库的自动提交功能， 开启事务</span><br><span class="line">        conn.setAutoCommit(false);</span><br><span class="line">        //自动开启事务</span><br><span class="line">        String sql = &quot;update account set money = money-500 where id = 1&quot;;</span><br><span class="line">        ps =conn.prepareStatement(sql);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line">        String sql2 = &quot;update account set money = money-500 where id = 2&quot;;</span><br><span class="line">        ps=conn.prepareStatement(sql2);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">        //业务完毕，提交事务</span><br><span class="line">        conn.commit();</span><br><span class="line">        System.out.println(&quot;操作成功&quot;);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //如果失败，则默认回滚</span><br><span class="line">            conn.rollback();//如果失败，回滚</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            JdbcUtils.release(conn,ps,rs);</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p>数据库连接–执行完毕–释放</p><p>连接–释放 十分浪费资源</p><p>池化技术： 准备一些预先的资源，过来就连接预先准备好的</p><p>常用连接数 100</p><p>最少连接数：100</p><p>最大连接数 ： 120 业务最高承载上限</p><p>排队等待，</p><p>等待超时：100ms</p><p>编写连接池，实现一个接口 DateSource</p><p>开源数据源实现(拿来即用)</p><p>DBCP</p><p>C3P0</p><p>Druid: 阿里巴巴</p><p>使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了</p><p>DBCP</p><p>需要用到的jar包</p><p>dbcp.ar</p><p>C3P0</p><p>结论</p><p>无论使用什么数据源，本质是不变的，DateSource接口不会变，方法就不会变</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们学习一门编程语言时，都是从“Hello, World!”开始。所有程序员在其职业生涯中，都至少接触过一个经典的“Hello, World!” 程序。通常程序员会使用多种编程语言，多的甚至实现了十几种。</p><hr><h3 id="C语言-Hello-World！"><a href="#C语言-Hello-World！" class="headerlink" title="C语言: Hello,World！"></a><strong>C语言</strong>: Hello,World！</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="C-语言-Hello-World！"><a href="#C-语言-Hello-World！" class="headerlink" title="C++语言: Hello,World！"></a><strong>C++语言</strong>: Hello,World！</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Python语言-Hello-World！"><a href="#Python语言-Hello-World！" class="headerlink" title="Python语言: Hello,World！"></a><strong>Python语言</strong>: Hello,World！</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="Java语言-Hello-World！"><a href="#Java语言-Hello-World！" class="headerlink" title="Java语言: Hello,World！"></a>Java语言: Hello,World！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="JavaScript语言-Hello-World！"><a href="#JavaScript语言-Hello-World！" class="headerlink" title="JavaScript语言: Hello,World！"></a>JavaScript<strong>语言</strong>: Hello,World！</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="PHP语言-Hello-World！"><a href="#PHP语言-Hello-World！" class="headerlink" title="PHP语言: Hello,World！"></a>PHP语言: Hello,World！</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">&quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="C-语言-Hello-World！-1"><a href="#C-语言-Hello-World！-1" class="headerlink" title="C#语言: Hello,World！"></a>C#<strong>语言</strong>: Hello,World！</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span> &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Groovy语言-Hello-World！"><a href="#Groovy语言-Hello-World！" class="headerlink" title="Groovy语言: Hello,World！"></a>Groovy语言: Hello,World！</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println <span class="string">&quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Scala语言-Hello-World！"><a href="#Scala语言-Hello-World！" class="headerlink" title="Scala语言: Hello,World！"></a>Scala语言: Hello,World！</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">      println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Windows-PowerShell语言-Hello-World！"><a href="#Windows-PowerShell语言-Hello-World！" class="headerlink" title="Windows PowerShell语言: Hello,World！"></a>Windows PowerShell语言: Hello,World！</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Go语言-Hello-World！"><a href="#Go语言-Hello-World！" class="headerlink" title="Go语言: Hello,World！"></a>Go语言: Hello,World！</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Rust语言-Hello-World！"><a href="#Rust语言-Hello-World！" class="headerlink" title="Rust语言: Hello,World！"></a>Rust语言: Hello,World！</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">println</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Dart语言-Hello-World！"><a href="#Dart语言-Hello-World！" class="headerlink" title="Dart语言: Hello,World！"></a>Dart语言: Hello,World！</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Kotlin语言-Hello-World！"><a href="#Kotlin语言-Hello-World！" class="headerlink" title="**Kotlin语言: Hello,World！"></a><strong>**Kotlin</strong>语言: Hello,World！</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="TypeScript-语言-Hello-World！"><a href="#TypeScript-语言-Hello-World！" class="headerlink" title="TypeScript*语言**: Hello,World！"></a><strong><strong>TypeScript*</strong></strong>语言**: Hello,World！</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="Swift-语言-Hello-World！"><a href="#Swift-语言-Hello-World！" class="headerlink" title="Swift**语言**: Hello,World！"></a><strong><strong>Swift**</strong></strong>语言**: Hello,World！</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><hr><p>以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持！</p>]]></content>
      
      
      <categories>
          
          <category> 练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/posts/ff05b5bf.html"/>
      <url>/posts/ff05b5bf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是我的第一篇博客，作为起始，自然应该说一下写博客的目的，目标，展望一下未来，做一下战略分析，规划蓝图。</p><p>写文章的目的。首先写博客的过程本身就是目的，培养自己的写作水平，练习排版，文字的组织等等，重要的是能更好地表达自己的思想。然后写的过程中可以整理思路，写完之后可以回顾一次思考或者写代码的过程中的思维轨迹，查漏补缺。即使没有起到以上作用，能够长期坚持并且积累起一篇篇文章，几年之后回过来看一定很有成就感。</p><p>第二个目的当然是交流，如果写博客只是为了让自己看，那不如写在云笔记上好了，写博客当然是为了跟网络更好的交流，提供帮助，促进话题的展开和讨论。</p><p>第三个目的跟技术有关，总体来说，我善于独立思考，并且思维发散活跃，但是思绪就像天空上的浮云，整个流程过了以后什么都没剩下，即使很多时候有让人启发式的惊艳想法，之后想回忆却怎么也记不起来。而代码也一样，之前做过的东西很多时候只有做过的记忆，虽然再做一次可以快很多，但是重复的过程难免浪费时间，所以我会尽量记录代码，写demo，配合github保存，这样我碰到类似的功能可以迅速地copy自己。</p><p>第四个目的和现实有关，有一个良好活跃的博客无疑是最好的名片</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"name":"镜中月","short_name":"镜中月","theme_color":"#bfbfbf","background_color":"#49b1f5","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/256.png","sizes":"256x256","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>@import url(https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&display=swap);/*字体*/@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://cdn.cbd.int/anzhiyu-blog@latest/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: normal;}div#menus {    font-family: 'ZhuZiAYuanJWD';}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/*!* 时间轴生肖icon *!*//*svg.icon {*//*    !* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 *!*//*    width: 1em;*//*    height: 1em;*//*    !* width和height定义图标的默认宽度和高度*!*//*    vertical-align: -0.15em;*//*    fill: currentColor;*//*    overflow: hidden;*//*}*/.icon-zhongbiao::before {    color: #f7c768;}/*!* bilibli番剧插件 *!*//*.bangumi-active {*//*    background: #dbecfe !important;*//*    border-radius: 10px !important;*//*}*//*a.bangumi-tab:hover {*//*    text-decoration: none !important;*//*}*//*.bangumi-button:hover {*//*    background: #dbecfe !important;*//*    border-radius: 10px !important;*//*}*//*a.bangumi-button.bangumi-nextpage:hover {*//*    text-decoration: none !important;*//*}*//*.bangumi-button {*//*    padding: 5px 10px !important;*//*}*//*a.bangumi-tab {*//*    padding: 5px 10px !important;*//*}*//*svg.icon.faa-tada {*//*    font-size: 1.1em;*//*}*//* 解决artitalk的图标问题 */#uploadSource > svg {    width: 1.19em;    height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts > .recent-post-item {    background: #121212;}[data-theme='dark'] .card-widget {    background: #121212 !important;}[data-theme='dark'] div#post {    background: #121212 !important;}[data-theme='dark'] div#tag {    background: #121212 !important;}[data-theme='dark'] div#archive {    background: #121212 !important;}[data-theme='dark'] div#page {    background: #121212 !important;}[data-theme='dark'] div#category {    background: #121212 !important;}[data-theme='dark'] div#category {    background: transparent !important;}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside > div > button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 10px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: #7cc6f3;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #49b1f5;}/*!* 音乐播放器 *!*//*.aplayer .aplayer-lrc {*//*  display: none !important;*//*}*/.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {    cursor: url('img/x1.cur'), auto;}a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {    cursor: url('img/x2.cur'), auto !important;}/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #49b1f5;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    /*background: var(--heo-card-bg);*/    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/comments/index.html"/>
      <url>/comments/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
  
</search>
